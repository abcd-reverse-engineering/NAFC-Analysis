package h.g2;

import androidx.exifinterface.media.ExifInterface;
import anet.channel.strategy.dispatch.DispatchConstants;
import com.alibaba.sdk.android.oss.common.RequestParameters;
import com.umeng.analytics.pro.bh;
import com.umeng.socialize.net.dplus.CommonNetImpl;
import h.h2.b;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.RandomAccess;
import java.util.Set;
import ui.activity.SmsRecordSelectActivity;

/* JADX INFO: Access modifiers changed from: package-private */
/* compiled from: _Collections.kt */
@h.y(bv = {1, 0, 3}, d1 = {"\u0000Ú\u0002\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\u001c\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010%\n\u0002\b\b\n\u0002\u0010\u0006\n\u0002\u0010\u0005\n\u0002\b\u0002\n\u0002\u0010\u0007\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0010\t\n\u0000\n\u0002\u0010\n\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001e\n\u0002\b\u0013\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u0000\n\u0002\b\u0013\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\u0002\n\u0002\b\u0006\n\u0002\u0010!\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\"\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0006\n\u0002\u0010\u000e\n\u0002\b\f\n\u0002\u0010\u000f\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\u0011\n\u0002\b\f\n\u0002\u0018\u0002\n\u0002\b\u0019\n\u0002\u0018\u0002\n\u0002\b\u0017\n\u0002\u0010\u0018\n\u0000\n\u0002\u0010\u0012\n\u0000\n\u0002\u0010\u0019\n\u0002\u0010\f\n\u0002\b\u0002\n\u0002\u0010\u0013\n\u0000\n\u0002\u0010\u0014\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0015\n\u0002\b\u0002\n\u0002\u0010\u0016\n\u0002\b\u0002\n\u0002\u0010#\n\u0002\b\u0002\n\u0002\u0010\u0017\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0006\u001a-\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u0016\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u001f\u0010\u0007\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0087\b\u001a\u001c\u0010\b\u001a\b\u0012\u0004\u0012\u0002H\u00020\t\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aQ\u0010\n\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b\u001a?\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\u00020\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001aY\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u001aZ\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b¢\u0006\u0002\u0010\u0017\u001at\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b¢\u0006\u0002\u0010\u0018\u001al\u0010\u0019\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b¢\u0006\u0002\u0010\u0017\u001a?\u0010\u001a\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\b\u001aZ\u0010\u001c\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\u0087\b¢\u0006\u0002\u0010\u0017\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0002\b \u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0002\b!\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0002\b#\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007¢\u0006\u0002\b%\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007¢\u0006\u0002\b'\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007¢\u0006\u0002\b)\u001a,\u0010*\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$H\u0007\u001aF\u0010*\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a\u001e\u0010.\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n¢\u0006\u0002\u0010/\u001a\u001e\u00100\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n¢\u0006\u0002\u0010/\u001a\u001e\u00101\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n¢\u0006\u0002\u0010/\u001a\u001e\u00102\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n¢\u0006\u0002\u0010/\u001a\u001e\u00103\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+H\u0087\n¢\u0006\u0002\u0010/\u001a+\u00104\u001a\u00020\u0001\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0002\u00107\u001a\u0019\u00108\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000209H\u0087\b\u001a\u0016\u00108\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u00108\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u001c\u0010:\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a9\u0010;\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001a$\u0010=\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010>\u001a\u00020$\u001a$\u0010?\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010>\u001a\u00020$\u001a3\u0010@\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a3\u0010A\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a#\u0010B\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010C\u001a\u00020$¢\u0006\u0002\u0010D\u001a&\u0010B\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$H\u0087\b¢\u0006\u0002\u0010E\u001a7\u0010F\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010C\u001a\u00020$2\u0012\u0010G\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005¢\u0006\u0002\u0010H\u001a:\u0010F\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$2\u0012\u0010G\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005H\u0087\b¢\u0006\u0002\u0010I\u001a%\u0010J\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010C\u001a\u00020$¢\u0006\u0002\u0010D\u001a(\u0010J\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$H\u0087\b¢\u0006\u0002\u0010E\u001a3\u0010K\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001aH\u0010L\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010MH\u0086\b\u001aa\u0010P\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010MH\u0086\b¢\u0006\u0002\u0010S\u001a$\u0010T\u001a\r\u0012\t\u0012\u0007H-¢\u0006\u0002\bU0+\"\u0006\b\u0000\u0010-\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0003H\u0086\b\u001a8\u0010V\u001a\u0002HQ\"\u0006\b\u0000\u0010-\u0018\u0001\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\u0006\u0012\u0002\b\u00030\u00032\u0006\u0010\u0016\u001a\u0002HQH\u0086\b¢\u0006\u0002\u0010W\u001a3\u0010X\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\"\u0010Y\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\b\b\u0000\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a;\u0010[\u001a\u0002HQ\"\u0010\b\u0000\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R\"\b\b\u0001\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ¢\u0006\u0002\u0010W\u001aL\u0010\\\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010]\u001aL\u0010^\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010]\u001a4\u0010_\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b¢\u0006\u0002\u0010`\u001a4\u0010a\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b¢\u0006\u0002\u0010`\u001a4\u0010a\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b¢\u0006\u0002\u0010b\u001a\u001b\u0010c\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a2\u0010c\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a\u001b\u0010c\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+¢\u0006\u0002\u0010/\u001a\u001d\u0010e\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a4\u0010e\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a\u001d\u0010e\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+¢\u0006\u0002\u0010/\u001a?\u0010f\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005H\u0086\b\u001aX\u0010g\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005H\u0086\b¢\u0006\u0002\u0010]\u001aU\u0010h\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010i\u001a\u0002H-2'\u0010j\u001a#\u0012\u0013\u0012\u0011H-¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0086\b¢\u0006\u0002\u0010l\u001aj\u0010m\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010i\u001a\u0002H-2<\u0010j\u001a8\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0013\u0012\u0011H-¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0nH\u0086\b¢\u0006\u0002\u0010o\u001aU\u0010p\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010i\u001a\u0002H-2'\u0010j\u001a#\u0012\u0004\u0012\u0002H\u0002\u0012\u0013\u0012\u0011H-¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H-0MH\u0086\b¢\u0006\u0002\u0010q\u001aj\u0010r\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010i\u001a\u0002H-2<\u0010j\u001a8\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0013\u0012\u0011H-¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H-0nH\u0086\b¢\u0006\u0002\u0010s\u001a-\u0010t\u001a\u00020u\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010v\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020u0\u0005H\u0087\b\u001aB\u0010w\u001a\u00020u\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010v\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020u0MH\u0086\b\u001a:\u0010x\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$2\u0012\u0010G\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005H\u0087\b¢\u0006\u0002\u0010I\u001a%\u0010y\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010C\u001a\u00020$¢\u0006\u0002\u0010E\u001aE\u0010z\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001a_\u0010z\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u001a^\u0010{\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u001c\b\u0002\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020|0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b¢\u0006\u0002\u0010\u0017\u001ax\u0010{\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u001c\b\u0003\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0|0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b¢\u0006\u0002\u0010\u0018\u001aA\u0010}\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0~\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\b\u0004\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0087\b\u001a)\u0010\u007f\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002¢\u0006\u0003\u0010\u0080\u0001\u001a)\u0010\u007f\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u00106\u001a\u0002H\u0002¢\u0006\u0003\u0010\u0081\u0001\u001a.\u0010\u0082\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u0082\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u0083\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u0083\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a0\u0010\u0084\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0004\u001a\u008d\u0001\u0010\u0087\u0001\u001a\u0003H\u0088\u0001\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010\u0088\u0001*\b0\u0089\u0001j\u0003`\u008a\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\b\u0010\u008b\u0001\u001a\u0003H\u0088\u00012\n\b\u0002\u0010\u008c\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008e\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008f\u0001\u001a\u00030\u008d\u00012\t\b\u0002\u0010\u0090\u0001\u001a\u00020$2\n\b\u0002\u0010\u0091\u0001\u001a\u00030\u008d\u00012\u0017\b\u0002\u0010\u000e\u001a\u0011\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u00030\u008d\u0001\u0018\u00010\u0005¢\u0006\u0003\u0010\u0092\u0001\u001al\u0010\u0093\u0001\u001a\u00030\u0094\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\n\b\u0002\u0010\u008c\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008e\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008f\u0001\u001a\u00030\u008d\u00012\t\b\u0002\u0010\u0090\u0001\u001a\u00020$2\n\b\u0002\u0010\u0091\u0001\u001a\u00030\u008d\u00012\u0017\b\u0002\u0010\u000e\u001a\u0011\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u00030\u008d\u0001\u0018\u00010\u0005\u001a\u001c\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a3\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a\u001c\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+¢\u0006\u0002\u0010/\u001a3\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010b\u001a*\u0010\u0096\u0001\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002¢\u0006\u0003\u0010\u0080\u0001\u001a*\u0010\u0096\u0001\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b5*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u00106\u001a\u0002H\u0002¢\u0006\u0003\u0010\u0081\u0001\u001a\u001e\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a5\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a\u001e\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+¢\u0006\u0002\u0010/\u001a5\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010b\u001a:\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b\u001aO\u0010\u0099\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0086\b\u001aU\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0MH\u0086\b\u001an\u0010\u009b\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0MH\u0086\b¢\u0006\u0002\u0010S\u001ah\u0010\u009c\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0086\b¢\u0006\u0002\u0010S\u001a@\u0010\u009d\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001aY\u0010\u009e\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020Z\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b¢\u0006\u0002\u0010]\u001aS\u0010\u009f\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H-0R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ2\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b¢\u0006\u0002\u0010]\u001a*\u0010 \u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0003\u0010¢\u0001\u001a\u001b\u0010 \u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\u0010£\u0001\u001a\u001b\u0010 \u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\u0010¤\u0001\u001aF\u0010¥\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a>\u0010¦\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010§\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020¨\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`©\u0001¢\u0006\u0003\u0010ª\u0001\u001a*\u0010«\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0003\u0010¢\u0001\u001a\u001b\u0010«\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\u0010£\u0001\u001a\u001b\u0010«\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\u0010¤\u0001\u001aF\u0010¬\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a>\u0010\u00ad\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010§\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020¨\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`©\u0001¢\u0006\u0003\u0010ª\u0001\u001a.\u0010®\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0003\u0010¯\u0001\u001a8\u0010®\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010°\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020±\u0001H\u0086\u0002¢\u0006\u0003\u0010²\u0001\u001a/\u0010®\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010°\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a/\u0010®\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010°\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\tH\u0086\u0002\u001a.\u0010³\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0087\b¢\u0006\u0003\u0010¯\u0001\u001a\u0017\u0010´\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a.\u0010´\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a>\u0010µ\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u000e\b\u0001\u0010Q*\b\u0012\u0004\u0012\u0002H\u00020\u0003*\u0002HQ2\u0012\u0010v\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020u0\u0005H\u0087\b¢\u0006\u0003\u0010¶\u0001\u001aF\u0010·\u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000f\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0003\u0010¹\u0001\u001a8\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\u0010\u0010°\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020±\u0001H\u0086\u0002¢\u0006\u0003\u0010º\u0001\u001a/\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\r\u0010°\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a/\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\r\u0010°\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\tH\u0086\u0002\u001a.\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0003\u0010¯\u0001\u001a8\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010°\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020±\u0001H\u0086\u0002¢\u0006\u0003\u0010²\u0001\u001a/\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010°\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a/\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010°\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\tH\u0086\u0002\u001a.\u0010»\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\u0006\u00106\u001a\u0002H\u0002H\u0087\b¢\u0006\u0003\u0010¹\u0001\u001a.\u0010»\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00106\u001a\u0002H\u0002H\u0087\b¢\u0006\u0003\u0010¯\u0001\u001a \u0010¼\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000209H\u0087\b¢\u0006\u0003\u0010½\u0001\u001a)\u0010¼\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\b\u0010¼\u0001\u001a\u00030¾\u0001H\u0007¢\u0006\u0003\u0010¿\u0001\u001a\"\u0010À\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000209H\u0087\b¢\u0006\u0003\u0010½\u0001\u001a+\u0010À\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002092\b\u0010¼\u0001\u001a\u00030¾\u0001H\u0007¢\u0006\u0003\u0010¿\u0001\u001aX\u0010Á\u0001\u001a\u0003HÂ\u0001\"\u0005\b\u0000\u0010Â\u0001\"\t\b\u0001\u0010\u0002*\u0003HÂ\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010j\u001a%\u0012\u0014\u0012\u0012HÂ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003HÂ\u00010MH\u0086\b¢\u0006\u0003\u0010Ã\u0001\u001am\u0010Ä\u0001\u001a\u0003HÂ\u0001\"\u0005\b\u0000\u0010Â\u0001\"\t\b\u0001\u0010\u0002*\u0003HÂ\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010j\u001a:\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0014\u0012\u0012HÂ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003HÂ\u00010nH\u0086\b¢\u0006\u0003\u0010Å\u0001\u001aZ\u0010Æ\u0001\u001a\u0005\u0018\u0001HÂ\u0001\"\u0005\b\u0000\u0010Â\u0001\"\t\b\u0001\u0010\u0002*\u0003HÂ\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010j\u001a%\u0012\u0014\u0012\u0012HÂ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003HÂ\u00010MH\u0087\b¢\u0006\u0003\u0010Ã\u0001\u001aX\u0010Ç\u0001\u001a\u0003HÂ\u0001\"\u0005\b\u0000\u0010Â\u0001\"\t\b\u0001\u0010\u0002*\u0003HÂ\u0001*\b\u0012\u0004\u0012\u0002H\u00020+2)\u0010j\u001a%\u0012\u0004\u0012\u0002H\u0002\u0012\u0014\u0012\u0012HÂ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0005\u0012\u0003HÂ\u00010MH\u0086\b¢\u0006\u0003\u0010È\u0001\u001am\u0010É\u0001\u001a\u0003HÂ\u0001\"\u0005\b\u0000\u0010Â\u0001\"\t\b\u0001\u0010\u0002*\u0003HÂ\u0001*\b\u0012\u0004\u0012\u0002H\u00020+2>\u0010j\u001a:\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0002\u0012\u0014\u0012\u0012HÂ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0005\u0012\u0003HÂ\u00010nH\u0086\b¢\u0006\u0003\u0010Ê\u0001\u001aZ\u0010Ë\u0001\u001a\u0005\u0018\u0001HÂ\u0001\"\u0005\b\u0000\u0010Â\u0001\"\t\b\u0001\u0010\u0002*\u0003HÂ\u0001*\b\u0012\u0004\u0012\u0002H\u00020+2)\u0010j\u001a%\u0012\u0004\u0012\u0002H\u0002\u0012\u0014\u0012\u0012HÂ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0005\u0012\u0003HÂ\u00010MH\u0087\b¢\u0006\u0003\u0010È\u0001\u001a#\u0010Ì\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a#\u0010Ì\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\b\b\u0000\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020+\u001a\u001d\u0010Í\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a]\u0010Î\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010i\u001a\u0002H-2'\u0010j\u001a#\u0012\u0013\u0012\u0011H-¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0MH\u0087\b¢\u0006\u0003\u0010Ï\u0001\u001ar\u0010Ð\u0001\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010i\u001a\u0002H-2<\u0010j\u001a8\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0013\u0012\u0011H-¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0nH\u0087\b¢\u0006\u0003\u0010Ñ\u0001\u001aX\u0010Ò\u0001\u001a\t\u0012\u0005\u0012\u0003HÂ\u00010+\"\u0005\b\u0000\u0010Â\u0001\"\t\b\u0001\u0010\u0002*\u0003HÂ\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010j\u001a%\u0012\u0014\u0012\u0012HÂ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003HÂ\u00010MH\u0087\b\u001am\u0010Ó\u0001\u001a\t\u0012\u0005\u0012\u0003HÂ\u00010+\"\u0005\b\u0000\u0010Â\u0001\"\t\b\u0001\u0010\u0002*\u0003HÂ\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010j\u001a:\u0012\u0013\u0012\u00110$¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(C\u0012\u0014\u0012\u0012HÂ\u0001¢\u0006\f\bN\u0012\b\bO\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003HÂ\u00010nH\u0087\b\u001a\u001c\u0010Ô\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a3\u0010Ô\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a\u001c\u0010Ô\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+¢\u0006\u0002\u0010/\u001a\u001e\u0010Õ\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a5\u0010Õ\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a\u001e\u0010Õ\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+¢\u0006\u0002\u0010/\u001a,\u0010Ö\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\r\u0010×\u0001\u001a\b\u0012\u0004\u0012\u00020$0\u0003\u001a'\u0010Ö\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\b\u0010×\u0001\u001a\u00030Ø\u0001\u001aC\u0010Ù\u0001\u001a\u00020u\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020|2\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001aC\u0010Ú\u0001\u001a\u00020u\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020|2\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001a\"\u0010Û\u0001\u001a\u00020u\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020|\u001a(\u0010Ü\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aI\u0010Ý\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001aI\u0010Þ\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u0010<\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\u0086\b\u001a(\u0010ß\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a<\u0010à\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010§\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020¨\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`©\u0001\u001a0\u0010á\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0004\u001a\u0019\u0010â\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0003\bã\u0001\u001a\u0019\u0010â\u0001\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\bä\u0001\u001a\u0019\u0010â\u0001\u001a\u00020\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\bå\u0001\u001a\u0019\u0010â\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007¢\u0006\u0003\bæ\u0001\u001a\u0019\u0010â\u0001\u001a\u00020&*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007¢\u0006\u0003\bç\u0001\u001a\u0019\u0010â\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007¢\u0006\u0003\bè\u0001\u001a.\u0010é\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020$0\u0005H\u0086\b\u001a.\u0010ê\u0001\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010<\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\u0086\b\u001a%\u0010ë\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010>\u001a\u00020$\u001a%\u0010ì\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0006\u0010>\u001a\u00020$\u001a4\u0010í\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020+2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a4\u0010î\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u0012\u0010ï\u0001\u001a\u00030ð\u0001*\b\u0012\u0004\u0012\u00020\u000109\u001a\u0012\u0010ñ\u0001\u001a\u00030ò\u0001*\b\u0012\u0004\u0012\u00020\u001f09\u001a\u0013\u0010ó\u0001\u001a\u00030ô\u0001*\t\u0012\u0005\u0012\u00030õ\u000109\u001a6\u0010ö\u0001\u001a\u0002HQ\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010Q*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020R*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HQ¢\u0006\u0002\u0010W\u001a\u0012\u0010÷\u0001\u001a\u00030ø\u0001*\b\u0012\u0004\u0012\u00020\u001e09\u001a\u0012\u0010ù\u0001\u001a\u00030ú\u0001*\b\u0012\u0004\u0012\u00020\"09\u001a)\u0010û\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\u00020ü\u0001j\t\u0012\u0004\u0012\u0002H\u0002`ý\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u0012\u0010þ\u0001\u001a\u00030ÿ\u0001*\b\u0012\u0004\u0012\u00020$09\u001a\u001d\u0010\u0080\u0002\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u0012\u0010\u0081\u0002\u001a\u00030\u0082\u0002*\b\u0012\u0004\u0012\u00020&09\u001a\u001d\u0010\u0083\u0002\u001a\b\u0012\u0004\u0012\u0002H\u00020|\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000209\u001a\u001d\u0010\u0083\u0002\u001a\b\u0012\u0004\u0012\u0002H\u00020|\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010\u0084\u0002\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010\u0086\u0002\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u0012\u0010\u0087\u0002\u001a\u00030\u0088\u0002*\b\u0012\u0004\u0012\u00020(09\u001a0\u0010\u0089\u0002\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0004\u001aC\u0010\u008a\u0002\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010\u008b\u0002\u001a\u00020$2\t\b\u0002\u0010\u008c\u0002\u001a\u00020\u0001H\u0007\u001a]\u0010\u008a\u0002\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010\u008b\u0002\u001a\u00020$2\t\b\u0002\u0010\u008c\u0002\u001a\u00020\u00012\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a$\u0010\u008d\u0002\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u0002H\u00020\u008e\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aJ\u0010\u008f\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u000f0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u0086\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H-0±\u0001H\u0086\u0004¢\u0006\u0003\u0010²\u0001\u001a~\u0010\u008f\u0002\u001a\b\u0012\u0004\u0012\u0002H\r0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u0086\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H-0±\u000128\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0090\u0002\u0012\u0014\u0012\u0012H-¢\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0091\u0002\u0012\u0004\u0012\u0002H\r0MH\u0086\b¢\u0006\u0003\u0010\u0092\u0002\u001aA\u0010\u008f\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u000f0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003H\u0086\u0004\u001au\u0010\u008f\u0002\u001a\b\u0012\u0004\u0012\u0002H\r0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0090\u0002\u0012\u0014\u0012\u0012H-¢\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0091\u0002\u0012\u0004\u0012\u0002H\r0MH\u0086\b\u001a+\u0010\u0093\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\u00020\u000f0+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u001a`\u0010\u0093\u0002\u001a\b\u0012\u0004\u0012\u0002H-0+\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0090\u0002\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bN\u0012\t\bO\u0012\u0005\b\b(\u0091\u0002\u0012\u0004\u0012\u0002H-0MH\u0087\b¨\u0006\u0094\u0002"}, d2 = {"all", "", ExifInterface.GPS_DIRECTION_TRUE, "", "predicate", "Lkotlin/Function1;", i.a.a.a.m.k.c.f16811b, "asIterable", "asSequence", "Lkotlin/sequences/Sequence;", "associate", "", "K", ExifInterface.GPS_MEASUREMENT_INTERRUPTED, "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "associateWith", "valueSelector", "associateWithTo", "average", "", "", "averageOfByte", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "chunked", "", "size", "R", "component1", "(Ljava/util/List;)Ljava/lang/Object;", "component2", "component3", "component4", "component5", "contains", "Lkotlin/internal/OnlyInputTypes;", "element", "(Ljava/lang/Iterable;Ljava/lang/Object;)Z", "count", "", "distinct", "distinctBy", "selector", "drop", "n", "dropLast", "dropLastWhile", "dropWhile", "elementAt", "index", "(Ljava/lang/Iterable;I)Ljava/lang/Object;", "(Ljava/util/List;I)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Ljava/lang/Iterable;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "(Ljava/util/List;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", CommonNetImpl.NAME, "filterIndexedTo", "C", "", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "filterIsInstance", "Lkotlin/internal/NoInfer;", "filterIsInstanceTo", "(Ljava/lang/Iterable;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "filterNotNull", "", "filterNotNullTo", "filterNotTo", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "first", "(Ljava/lang/Iterable;)Ljava/lang/Object;", "firstOrNull", "flatMap", "flatMapTo", "fold", "initial", "operation", "acc", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "foldRight", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldRightIndexed", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "forEach", "", "action", "forEachIndexed", "getOrElse", "getOrNull", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOf", "(Ljava/lang/Iterable;Ljava/lang/Object;)I", "(Ljava/util/List;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "intersect", "", DispatchConstants.OTHER, "joinTo", ExifInterface.GPS_MEASUREMENT_IN_PROGRESS, "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "buffer", "separator", "", RequestParameters.PREFIX, "postfix", "limit", "truncated", "(Ljava/lang/Iterable;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "joinToString", "", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "", "(Ljava/lang/Iterable;)Ljava/lang/Comparable;", "(Ljava/lang/Iterable;)Ljava/lang/Double;", "(Ljava/lang/Iterable;)Ljava/lang/Float;", "maxBy", "maxWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Ljava/lang/Iterable;Ljava/util/Comparator;)Ljava/lang/Object;", "min", "minBy", "minWith", "minus", "(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/util/List;", "elements", "", "(Ljava/lang/Iterable;[Ljava/lang/Object;)Ljava/util/List;", "minusElement", "none", "onEach", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Iterable;", "partition", "plus", "(Ljava/util/Collection;Ljava/lang/Object;)Ljava/util/List;", "(Ljava/util/Collection;[Ljava/lang/Object;)Ljava/util/List;", "plusElement", "random", "(Ljava/util/Collection;)Ljava/lang/Object;", "Lkotlin/random/Random;", "(Ljava/util/Collection;Lkotlin/random/Random;)Ljava/lang/Object;", "randomOrNull", "reduce", ExifInterface.LATITUDE_SOUTH, "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceOrNull", "reduceRight", "(Ljava/util/List;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceRightIndexed", "(Ljava/util/List;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceRightOrNull", "requireNoNulls", "reversed", "scan", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "scanIndexed", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "scanReduce", "scanReduceIndexed", SmsRecordSelectActivity.f19032l, "singleOrNull", "slice", "indices", "Lkotlin/ranges/IntRange;", "sortBy", "sortByDescending", "sortDescending", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "subtract", "sum", "sumOfByte", "sumOfDouble", "sumOfFloat", "sumOfInt", "sumOfLong", "sumOfShort", "sumBy", "sumByDouble", "take", "takeLast", "takeLastWhile", "takeWhile", "toBooleanArray", "", "toByteArray", "", "toCharArray", "", "", "toCollection", "toDoubleArray", "", "toFloatArray", "", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toIntArray", "", "toList", "toLongArray", "", "toMutableList", "toMutableSet", "", "toSet", "toShortArray", "", "union", "windowed", "step", "partialWindows", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", bh.ay, "b", "(Ljava/lang/Iterable;[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "zipWithNext", "kotlin-stdlib"}, k = 5, mv = {1, 1, 16}, xi = 1, xs = "kotlin/collections/CollectionsKt")
/* loaded from: classes2.dex */
public class g0 extends f0 {

    /* JADX INFO: Add missing generic type declarations: [T] */
    /* compiled from: Sequences.kt */
    public static final class a<T> implements h.x2.m<T> {

        /* renamed from: a, reason: collision with root package name */
        final /* synthetic */ Iterable f16134a;

        public a(Iterable iterable) {
            this.f16134a = iterable;
        }

        @Override // h.x2.m
        @i.c.a.d
        public Iterator<T> iterator() {
            return this.f16134a.iterator();
        }
    }

    /* compiled from: _Collections.kt */
    static final class b extends h.q2.t.j0 implements h.q2.s.l {
        final /* synthetic */ int $index;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        b(int i2) {
            super(1);
            this.$index = i2;
        }

        @Override // h.q2.s.l
        public /* bridge */ /* synthetic */ Object invoke(Object obj) {
            return invoke(((Number) obj).intValue());
        }

        @i.c.a.d
        public final Void invoke(int i2) {
            throw new IndexOutOfBoundsException("Collection doesn't contain element at index " + this.$index + '.');
        }
    }

    /* JADX INFO: Add missing generic type declarations: [T, K] */
    /* compiled from: _Collections.kt */
    public static final class c<K, T> implements n0<T, K> {

        /* renamed from: a, reason: collision with root package name */
        final /* synthetic */ Iterable f16135a;

        /* renamed from: b, reason: collision with root package name */
        final /* synthetic */ h.q2.s.l f16136b;

        public c(Iterable<? extends T> iterable, h.q2.s.l lVar) {
            this.f16135a = iterable;
            this.f16136b = lVar;
        }

        @Override // h.g2.n0
        @i.c.a.d
        public Iterator<T> a() {
            return this.f16135a.iterator();
        }

        @Override // h.g2.n0
        public K a(T t) {
            return (K) this.f16136b.invoke(t);
        }
    }

    /* JADX INFO: Add missing generic type declarations: [T] */
    /* compiled from: _Collections.kt */
    static final class d<T> extends h.q2.t.j0 implements h.q2.s.a<Iterator<? extends T>> {
        final /* synthetic */ Iterable $this_withIndex;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        d(Iterable iterable) {
            super(0);
            this.$this_withIndex = iterable;
        }

        @Override // h.q2.s.a
        @i.c.a.d
        public final Iterator<T> invoke() {
            return this.$this_withIndex.iterator();
        }
    }

    /* JADX WARN: Type inference failed for: r0v10 */
    /* JADX WARN: Type inference failed for: r0v11 */
    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r0v4 */
    /* JADX WARN: Type inference failed for: r0v5, types: [T] */
    @i.c.a.e
    public static final <T, R extends Comparable<? super R>> T A(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, ? extends R> lVar) {
        h.q2.t.i0.f(iterable, "$this$maxBy");
        h.q2.t.i0.f(lVar, "selector");
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (!it.hasNext()) {
            return next;
        }
        R rInvoke = lVar.invoke(next);
        do {
            T next2 = it.next();
            R rInvoke2 = lVar.invoke(next2);
            next = next;
            if (rInvoke.compareTo(rInvoke2) < 0) {
                rInvoke = rInvoke2;
                next = next2;
            }
        } while (it.hasNext());
        return (T) next;
    }

    @i.c.a.d
    public static final <T> List<T> B(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$reversed");
        if ((iterable instanceof Collection) && ((Collection) iterable).size() <= 1) {
            return N(iterable);
        }
        List<T> listO = O(iterable);
        f0.j(listO);
        return listO;
    }

    public static <T> T C(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$single");
        if (iterable instanceof List) {
            return (T) u((List) iterable);
        }
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        T next = it.next();
        if (it.hasNext()) {
            throw new IllegalArgumentException("Collection has more than one element.");
        }
        return next;
    }

    @i.c.a.e
    public static final <T> T D(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$singleOrNull");
        if (iterable instanceof List) {
            List list = (List) iterable;
            if (list.size() == 1) {
                return (T) list.get(0);
            }
            return null;
        }
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (it.hasNext()) {
            return null;
        }
        return next;
    }

    @i.c.a.d
    public static final <T extends Comparable<? super T>> List<T> E(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$sorted");
        if (!(iterable instanceof Collection)) {
            List<T> listO = O(iterable);
            c0.d((List) listO);
            return listO;
        }
        Collection collection = (Collection) iterable;
        if (collection.size() <= 1) {
            return N(iterable);
        }
        Object[] array = collection.toArray(new Comparable[0]);
        if (array == null) {
            throw new h.e1("null cannot be cast to non-null type kotlin.Array<T>");
        }
        if (array == null) {
            throw new h.e1("null cannot be cast to non-null type kotlin.Array<T>");
        }
        Comparable[] comparableArr = (Comparable[]) array;
        if (comparableArr == null) {
            throw new h.e1("null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");
        }
        q.j(comparableArr);
        return q.d((Object[]) comparableArr);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r2v1, types: [java.lang.Object] */
    public static final <T> T F(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$single");
        h.q2.t.i0.f(lVar, "predicate");
        T t = null;
        boolean z = false;
        for (T t2 : iterable) {
            if (lVar.invoke(t2).booleanValue()) {
                if (z) {
                    throw new IllegalArgumentException("Collection contains more than one matching element.");
                }
                t = t2;
                z = true;
            }
        }
        if (z) {
            return t;
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r3v1, types: [java.lang.Object] */
    @i.c.a.e
    public static final <T> T G(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$singleOrNull");
        h.q2.t.i0.f(lVar, "predicate");
        boolean z = false;
        T t = null;
        for (T t2 : iterable) {
            if (lVar.invoke(t2).booleanValue()) {
                if (z) {
                    return null;
                }
                z = true;
                t = t2;
            }
        }
        if (z) {
            return t;
        }
        return null;
    }

    @i.c.a.d
    public static final <T, R extends Comparable<? super R>> List<T> H(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, ? extends R> lVar) {
        h.q2.t.i0.f(iterable, "$this$sortedBy");
        h.q2.t.i0.f(lVar, "selector");
        return d((Iterable) iterable, (Comparator) new b.C0239b(lVar));
    }

    @i.c.a.d
    public static final <T, R extends Comparable<? super R>> List<T> I(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, ? extends R> lVar) {
        h.q2.t.i0.f(iterable, "$this$sortedByDescending");
        h.q2.t.i0.f(lVar, "selector");
        return d((Iterable) iterable, (Comparator) new b.d(lVar));
    }

    public static final <T> int J(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Integer> lVar) {
        h.q2.t.i0.f(iterable, "$this$sumBy");
        h.q2.t.i0.f(lVar, "selector");
        Iterator<? extends T> it = iterable.iterator();
        int iIntValue = 0;
        while (it.hasNext()) {
            iIntValue += lVar.invoke(it.next()).intValue();
        }
        return iIntValue;
    }

    public static final <T> double K(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Double> lVar) {
        h.q2.t.i0.f(iterable, "$this$sumByDouble");
        h.q2.t.i0.f(lVar, "selector");
        Iterator<? extends T> it = iterable.iterator();
        double dDoubleValue = 0.0d;
        while (it.hasNext()) {
            dDoubleValue += lVar.invoke(it.next()).doubleValue();
        }
        return dDoubleValue;
    }

    @i.c.a.d
    public static final <T> List<T> L(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$takeWhile");
        h.q2.t.i0.f(lVar, "predicate");
        ArrayList arrayList = new ArrayList();
        for (T t : iterable) {
            if (!lVar.invoke(t).booleanValue()) {
                break;
            }
            arrayList.add(t);
        }
        return arrayList;
    }

    @i.c.a.d
    public static final <T> HashSet<T> M(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$toHashSet");
        return (HashSet) c((Iterable) iterable, new HashSet(b1.b(z.a(iterable, 12))));
    }

    @i.c.a.d
    public static <T> List<T> N(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$toList");
        if (!(iterable instanceof Collection)) {
            return y.b(O(iterable));
        }
        Collection collection = (Collection) iterable;
        int size = collection.size();
        if (size == 0) {
            return y.b();
        }
        if (size != 1) {
            return l(collection);
        }
        return x.a(iterable instanceof List ? ((List) iterable).get(0) : iterable.iterator().next());
    }

    @i.c.a.d
    public static final <T> List<T> O(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$toMutableList");
        return iterable instanceof Collection ? l((Collection) iterable) : (List) c((Iterable) iterable, new ArrayList());
    }

    @i.c.a.d
    public static final <T> Set<T> P(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$toMutableSet");
        return iterable instanceof Collection ? new LinkedHashSet((Collection) iterable) : (Set) c((Iterable) iterable, new LinkedHashSet());
    }

    @i.c.a.d
    public static final <T> Set<T> Q(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$toSet");
        if (!(iterable instanceof Collection)) {
            return m1.a((Set) ((Set) c((Iterable) iterable, new LinkedHashSet())));
        }
        Collection collection = (Collection) iterable;
        int size = collection.size();
        if (size == 0) {
            return m1.a();
        }
        if (size != 1) {
            return (Set) c((Iterable) iterable, new LinkedHashSet(b1.b(collection.size())));
        }
        return l1.a(iterable instanceof List ? ((List) iterable).get(0) : iterable.iterator().next());
    }

    @i.c.a.d
    public static final <T> Iterable<r0<T>> R(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$withIndex");
        return new s0(new d(iterable));
    }

    @h.t0(version = "1.2")
    @i.c.a.d
    public static final <T> List<h.i0<T, T>> S(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$zipWithNext");
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return y.b();
        }
        ArrayList arrayList = new ArrayList();
        T next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            arrayList.add(h.c1.a(next, next2));
            next = next2;
        }
        return arrayList;
    }

    public static final <T> boolean a(@i.c.a.d Iterable<? extends T> iterable, T t) {
        h.q2.t.i0.f(iterable, "$this$contains");
        return iterable instanceof Collection ? ((Collection) iterable).contains(t) : b(iterable, t) >= 0;
    }

    public static final <T> T b(@i.c.a.d Iterable<? extends T> iterable, int i2, @i.c.a.d h.q2.s.l<? super Integer, ? extends T> lVar) {
        h.q2.t.i0.f(iterable, "$this$elementAtOrElse");
        h.q2.t.i0.f(lVar, "defaultValue");
        if (iterable instanceof List) {
            List list = (List) iterable;
            return (i2 < 0 || i2 > y.a(list)) ? lVar.invoke(Integer.valueOf(i2)) : (T) list.get(i2);
        }
        if (i2 < 0) {
            return lVar.invoke(Integer.valueOf(i2));
        }
        int i3 = 0;
        for (T t : iterable) {
            int i4 = i3 + 1;
            if (i2 == i3) {
                return t;
            }
            i3 = i4;
        }
        return lVar.invoke(Integer.valueOf(i2));
    }

    public static final <T> int c(@i.c.a.d Iterable<? extends T> iterable, T t) {
        h.q2.t.i0.f(iterable, "$this$lastIndexOf");
        if (iterable instanceof List) {
            return ((List) iterable).lastIndexOf(t);
        }
        int i2 = -1;
        int i3 = 0;
        for (T t2 : iterable) {
            if (i3 < 0) {
                y.f();
            }
            if (h.q2.t.i0.a(t, t2)) {
                i2 = i3;
            }
            i3++;
        }
        return i2;
    }

    public static final <T> T d(@i.c.a.d Iterable<? extends T> iterable, int i2) {
        h.q2.t.i0.f(iterable, "$this$elementAt");
        return iterable instanceof List ? (T) ((List) iterable).get(i2) : (T) b(iterable, i2, new b(i2));
    }

    @i.c.a.e
    public static final <T> T e(@i.c.a.d Iterable<? extends T> iterable, int i2) {
        h.q2.t.i0.f(iterable, "$this$elementAtOrNull");
        if (iterable instanceof List) {
            return (T) f((List) iterable, i2);
        }
        if (i2 < 0) {
            return null;
        }
        int i3 = 0;
        for (T t : iterable) {
            int i4 = i3 + 1;
            if (i2 == i3) {
                return t;
            }
            i3 = i4;
        }
        return null;
    }

    @i.c.a.e
    public static final <T> T f(@i.c.a.d List<? extends T> list, int i2) {
        h.q2.t.i0.f(list, "$this$getOrNull");
        if (i2 < 0 || i2 > y.a((List) list)) {
            return null;
        }
        return list.get(i2);
    }

    /* JADX WARN: Type inference failed for: r0v4, types: [T, java.lang.Object] */
    public static final <T> T g(@i.c.a.d List<? extends T> list, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(list, "$this$last");
        h.q2.t.i0.f(lVar, "predicate");
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            T tPrevious = listIterator.previous();
            if (lVar.invoke(tPrevious).booleanValue()) {
                return tPrevious;
            }
        }
        throw new NoSuchElementException("List contains no element matching the predicate.");
    }

    /* JADX WARN: Multi-variable type inference failed */
    @h.m2.f
    private static final <T> Iterable<T> h(@i.c.a.d Iterable<? extends T> iterable) {
        return iterable;
    }

    /* JADX WARN: Type inference failed for: r0v4, types: [T, java.lang.Object] */
    @i.c.a.e
    public static final <T> T h(@i.c.a.d List<? extends T> list, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(list, "$this$lastOrNull");
        h.q2.t.i0.f(lVar, "predicate");
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            T tPrevious = listIterator.previous();
            if (lVar.invoke(tPrevious).booleanValue()) {
                return tPrevious;
            }
        }
        return null;
    }

    public static final <T, R extends Comparable<? super R>> void i(@i.c.a.d List<T> list, @i.c.a.d h.q2.s.l<? super T, ? extends R> lVar) {
        h.q2.t.i0.f(list, "$this$sortBy");
        h.q2.t.i0.f(lVar, "selector");
        if (list.size() > 1) {
            c0.b(list, new b.C0239b(lVar));
        }
    }

    @i.c.a.d
    public static final <T> List<T> j(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$dropWhile");
        h.q2.t.i0.f(lVar, "predicate");
        ArrayList arrayList = new ArrayList();
        boolean z = false;
        for (T t : iterable) {
            if (z) {
                arrayList.add(t);
            } else if (!lVar.invoke(t).booleanValue()) {
                arrayList.add(t);
                z = true;
            }
        }
        return arrayList;
    }

    @h.m2.f
    private static final <T> T k(@i.c.a.d List<? extends T> list) {
        h.q2.t.i0.f(list, "$this$component1");
        return list.get(0);
    }

    @h.m2.f
    private static final <T> T l(@i.c.a.d List<? extends T> list) {
        h.q2.t.i0.f(list, "$this$component2");
        return list.get(1);
    }

    @h.m2.f
    private static final <T> T m(@i.c.a.d List<? extends T> list) {
        h.q2.t.i0.f(list, "$this$component3");
        return list.get(2);
    }

    @h.m2.f
    private static final <T> T n(@i.c.a.d List<? extends T> list) {
        h.q2.t.i0.f(list, "$this$component4");
        return list.get(3);
    }

    @h.m2.f
    private static final <T> T o(@i.c.a.d List<? extends T> list) {
        h.q2.t.i0.f(list, "$this$component5");
        return list.get(4);
    }

    public static final <T> T p(@i.c.a.d List<? extends T> list) {
        h.q2.t.i0.f(list, "$this$first");
        if (list.isEmpty()) {
            throw new NoSuchElementException("List is empty.");
        }
        return list.get(0);
    }

    @i.c.a.e
    public static final <T> T q(@i.c.a.d List<? extends T> list) {
        h.q2.t.i0.f(list, "$this$firstOrNull");
        if (list.isEmpty()) {
            return null;
        }
        return list.get(0);
    }

    public static <T> T r(@i.c.a.d List<? extends T> list) {
        h.q2.t.i0.f(list, "$this$last");
        if (list.isEmpty()) {
            throw new NoSuchElementException("List is empty.");
        }
        return list.get(y.a((List) list));
    }

    @i.c.a.e
    public static final <T> T s(@i.c.a.d List<? extends T> list) {
        h.q2.t.i0.f(list, "$this$lastOrNull");
        if (list.isEmpty()) {
            return null;
        }
        return list.get(list.size() - 1);
    }

    public static final <T> T t(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$first");
        if (iterable instanceof List) {
            return (T) p((List) iterable);
        }
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            return it.next();
        }
        throw new NoSuchElementException("Collection is empty.");
    }

    @i.c.a.e
    public static final <T> T u(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$firstOrNull");
        if (iterable instanceof List) {
            List list = (List) iterable;
            if (list.isEmpty()) {
                return null;
            }
            return (T) list.get(0);
        }
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            return it.next();
        }
        return null;
    }

    public static final <T> int v(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$indexOfLast");
        h.q2.t.i0.f(lVar, "predicate");
        int i2 = -1;
        int i3 = 0;
        for (T t : iterable) {
            if (i3 < 0) {
                if (!h.m2.l.a(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                y.f();
            }
            if (lVar.invoke(t).booleanValue()) {
                i2 = i3;
            }
            i3++;
        }
        return i2;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r2v1, types: [java.lang.Object] */
    public static final <T> T w(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$last");
        h.q2.t.i0.f(lVar, "predicate");
        T t = null;
        boolean z = false;
        for (T t2 : iterable) {
            if (lVar.invoke(t2).booleanValue()) {
                t = t2;
                z = true;
            }
        }
        if (z) {
            return t;
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v1, types: [java.lang.Object] */
    @i.c.a.e
    public static final <T> T x(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$lastOrNull");
        h.q2.t.i0.f(lVar, "predicate");
        T t = null;
        for (T t2 : iterable) {
            if (lVar.invoke(t2).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    @i.c.a.d
    public static final <T, R> List<R> y(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, ? extends R> lVar) {
        h.q2.t.i0.f(iterable, "$this$map");
        h.q2.t.i0.f(lVar, "transform");
        ArrayList arrayList = new ArrayList(z.a(iterable, 10));
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            arrayList.add(lVar.invoke(it.next()));
        }
        return arrayList;
    }

    @i.c.a.d
    public static final <T, R> List<R> z(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, ? extends R> lVar) {
        h.q2.t.i0.f(iterable, "$this$mapNotNull");
        h.q2.t.i0.f(lVar, "transform");
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            R rInvoke = lVar.invoke(it.next());
            if (rInvoke != null) {
                arrayList.add(rInvoke);
            }
        }
        return arrayList;
    }

    @h.q2.e(name = "sumOfDouble")
    public static final double H(@i.c.a.d Iterable<Double> iterable) {
        h.q2.t.i0.f(iterable, "$this$sum");
        Iterator<Double> it = iterable.iterator();
        double dDoubleValue = 0.0d;
        while (it.hasNext()) {
            dDoubleValue += it.next().doubleValue();
        }
        return dDoubleValue;
    }

    @h.q2.e(name = "sumOfFloat")
    public static final float I(@i.c.a.d Iterable<Float> iterable) {
        h.q2.t.i0.f(iterable, "$this$sum");
        Iterator<Float> it = iterable.iterator();
        float fFloatValue = 0.0f;
        while (it.hasNext()) {
            fFloatValue += it.next().floatValue();
        }
        return fFloatValue;
    }

    public static final <T> int f(@i.c.a.d List<? extends T> list, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(list, "$this$indexOfLast");
        h.q2.t.i0.f(lVar, "predicate");
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            if (lVar.invoke(listIterator.previous()).booleanValue()) {
                return listIterator.nextIndex();
            }
        }
        return -1;
    }

    @i.c.a.d
    public static final float[] i(@i.c.a.d Collection<Float> collection) {
        h.q2.t.i0.f(collection, "$this$toFloatArray");
        float[] fArr = new float[collection.size()];
        Iterator<Float> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            fArr[i2] = it.next().floatValue();
            i2++;
        }
        return fArr;
    }

    @i.c.a.d
    public static final <T> List<T> k(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$filter");
        h.q2.t.i0.f(lVar, "predicate");
        ArrayList arrayList = new ArrayList();
        for (T t : iterable) {
            if (lVar.invoke(t).booleanValue()) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @i.c.a.d
    public static final <T> List<T> l(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$filterNot");
        h.q2.t.i0.f(lVar, "predicate");
        ArrayList arrayList = new ArrayList();
        for (T t : iterable) {
            if (!lVar.invoke(t).booleanValue()) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @i.c.a.d
    public static final short[] m(@i.c.a.d Collection<Short> collection) {
        h.q2.t.i0.f(collection, "$this$toShortArray");
        short[] sArr = new short[collection.size()];
        Iterator<Short> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            sArr[i2] = it.next().shortValue();
            i2++;
        }
        return sArr;
    }

    @h.q2.e(name = "averageOfLong")
    public static final double n(@i.c.a.d Iterable<Long> iterable) {
        h.q2.t.i0.f(iterable, "$this$average");
        Iterator<Long> it = iterable.iterator();
        double dLongValue = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            dLongValue += it.next().longValue();
            i2++;
            if (i2 < 0) {
                y.e();
            }
        }
        return i2 == 0 ? h.q2.t.w.f16453f.d() : dLongValue / i2;
    }

    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    public static final <T> T o(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$first");
        h.q2.t.i0.f(lVar, "predicate");
        for (T t : iterable) {
            if (lVar.invoke(t).booleanValue()) {
                return t;
            }
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    @i.c.a.d
    public static final <T, R> List<R> q(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, ? extends Iterable<? extends R>> lVar) {
        h.q2.t.i0.f(iterable, "$this$flatMap");
        h.q2.t.i0.f(lVar, "transform");
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            d0.a((Collection) arrayList, (Iterable) lVar.invoke(it.next()));
        }
        return arrayList;
    }

    @i.c.a.d
    public static final <T> List<T> s(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$filterNotNull");
        return (List) b((Iterable) iterable, new ArrayList());
    }

    @h.q2.e(name = "sumOfByte")
    public static final int G(@i.c.a.d Iterable<Byte> iterable) {
        h.q2.t.i0.f(iterable, "$this$sum");
        Iterator<Byte> it = iterable.iterator();
        int iByteValue = 0;
        while (it.hasNext()) {
            iByteValue += it.next().byteValue();
        }
        return iByteValue;
    }

    @h.q2.e(name = "sumOfInt")
    public static final int J(@i.c.a.d Iterable<Integer> iterable) {
        h.q2.t.i0.f(iterable, "$this$sum");
        Iterator<Integer> it = iterable.iterator();
        int iIntValue = 0;
        while (it.hasNext()) {
            iIntValue += it.next().intValue();
        }
        return iIntValue;
    }

    @h.q2.e(name = "sumOfLong")
    public static final long K(@i.c.a.d Iterable<Long> iterable) {
        h.q2.t.i0.f(iterable, "$this$sum");
        Iterator<Long> it = iterable.iterator();
        long jLongValue = 0;
        while (it.hasNext()) {
            jLongValue += it.next().longValue();
        }
        return jLongValue;
    }

    @i.c.a.d
    public static final <T, K> Map<K, List<T>> s(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, ? extends K> lVar) {
        h.q2.t.i0.f(iterable, "$this$groupBy");
        h.q2.t.i0.f(lVar, "keySelector");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (T t : iterable) {
            K kInvoke = lVar.invoke(t);
            Object arrayList = linkedHashMap.get(kInvoke);
            if (arrayList == null) {
                arrayList = new ArrayList();
                linkedHashMap.put(kInvoke, arrayList);
            }
            ((List) arrayList).add(t);
        }
        return linkedHashMap;
    }

    @h.t0(version = "1.1")
    @i.c.a.e
    /* renamed from: x, reason: collision with other method in class */
    public static final Double m767x(@i.c.a.d Iterable<Double> iterable) {
        h.q2.t.i0.f(iterable, "$this$max");
        Iterator<Double> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        double dDoubleValue = it.next().doubleValue();
        if (Double.isNaN(dDoubleValue)) {
            return Double.valueOf(dDoubleValue);
        }
        while (it.hasNext()) {
            double dDoubleValue2 = it.next().doubleValue();
            if (Double.isNaN(dDoubleValue2)) {
                return Double.valueOf(dDoubleValue2);
            }
            if (dDoubleValue < dDoubleValue2) {
                dDoubleValue = dDoubleValue2;
            }
        }
        return Double.valueOf(dDoubleValue);
    }

    /* JADX WARN: Type inference failed for: r0v10 */
    /* JADX WARN: Type inference failed for: r0v11 */
    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r0v4 */
    /* JADX WARN: Type inference failed for: r0v5, types: [T] */
    @i.c.a.e
    public static final <T, R extends Comparable<? super R>> T B(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, ? extends R> lVar) {
        h.q2.t.i0.f(iterable, "$this$minBy");
        h.q2.t.i0.f(lVar, "selector");
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (!it.hasNext()) {
            return next;
        }
        R rInvoke = lVar.invoke(next);
        do {
            T next2 = it.next();
            R rInvoke2 = lVar.invoke(next2);
            next = next;
            if (rInvoke.compareTo(rInvoke2) > 0) {
                rInvoke = rInvoke2;
                next = next2;
            }
        } while (it.hasNext());
        return (T) next;
    }

    @h.m2.f
    private static final <T> T a(@i.c.a.d List<? extends T> list, int i2, h.q2.s.l<? super Integer, ? extends T> lVar) {
        return (i2 < 0 || i2 > y.a((List) list)) ? lVar.invoke(Integer.valueOf(i2)) : list.get(i2);
    }

    @h.m2.f
    private static final <T> T d(@i.c.a.d List<? extends T> list, int i2) {
        return list.get(i2);
    }

    @i.c.a.d
    public static final <T> List<T> k(@i.c.a.d List<? extends T> list, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(list, "$this$takeLastWhile");
        h.q2.t.i0.f(lVar, "predicate");
        if (list.isEmpty()) {
            return y.b();
        }
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            if (!lVar.invoke(listIterator.previous()).booleanValue()) {
                listIterator.next();
                int size = list.size() - listIterator.nextIndex();
                if (size == 0) {
                    return y.b();
                }
                ArrayList arrayList = new ArrayList(size);
                while (listIterator.hasNext()) {
                    arrayList.add(listIterator.next());
                }
                return arrayList;
            }
        }
        return N(list);
    }

    @i.c.a.d
    public static <T> List<T> l(@i.c.a.d Collection<? extends T> collection) {
        h.q2.t.i0.f(collection, "$this$toMutableList");
        return new ArrayList(collection);
    }

    @h.q2.e(name = "averageOfShort")
    public static final double o(@i.c.a.d Iterable<Short> iterable) {
        h.q2.t.i0.f(iterable, "$this$average");
        Iterator<Short> it = iterable.iterator();
        double dShortValue = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            dShortValue += it.next().shortValue();
            i2++;
            if (i2 < 0) {
                y.e();
            }
        }
        return i2 == 0 ? h.q2.t.w.f16453f.d() : dShortValue / i2;
    }

    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    @i.c.a.e
    public static final <T> T p(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$firstOrNull");
        h.q2.t.i0.f(lVar, "predicate");
        for (T t : iterable) {
            if (lVar.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    @i.c.a.d
    public static final /* synthetic */ <R> List<R> r(@i.c.a.d Iterable<?> iterable) {
        h.q2.t.i0.f(iterable, "$this$filterIsInstance");
        ArrayList arrayList = new ArrayList();
        for (Object obj : iterable) {
            h.q2.t.i0.a(3, "R");
            if (obj instanceof Object) {
                arrayList.add(obj);
            }
        }
        return arrayList;
    }

    public static final <T> T v(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$last");
        if (iterable instanceof List) {
            return (T) w.r((List) iterable);
        }
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            T next = it.next();
            while (it.hasNext()) {
                next = it.next();
            }
            return next;
        }
        throw new NoSuchElementException("Collection is empty.");
    }

    @i.c.a.e
    public static final <T> T w(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$lastOrNull");
        if (iterable instanceof List) {
            List list = (List) iterable;
            if (list.isEmpty()) {
                return null;
            }
            return (T) list.get(list.size() - 1);
        }
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            next = it.next();
        }
        return next;
    }

    @h.t0(version = "1.1")
    @i.c.a.e
    /* renamed from: y, reason: collision with other method in class */
    public static final Double m769y(@i.c.a.d Iterable<Double> iterable) {
        h.q2.t.i0.f(iterable, "$this$min");
        Iterator<Double> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        double dDoubleValue = it.next().doubleValue();
        if (Double.isNaN(dDoubleValue)) {
            return Double.valueOf(dDoubleValue);
        }
        while (it.hasNext()) {
            double dDoubleValue2 = it.next().doubleValue();
            if (Double.isNaN(dDoubleValue2)) {
                return Double.valueOf(dDoubleValue2);
            }
            if (dDoubleValue > dDoubleValue2) {
                dDoubleValue = dDoubleValue2;
            }
        }
        return Double.valueOf(dDoubleValue);
    }

    public static final <T> boolean z(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$none");
        return iterable instanceof Collection ? ((Collection) iterable).isEmpty() : !iterable.iterator().hasNext();
    }

    @i.c.a.d
    public static final <T extends Comparable<? super T>> List<T> F(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$sortedDescending");
        return d((Iterable) iterable, h.h2.b.d());
    }

    @h.q2.e(name = "sumOfShort")
    public static final int L(@i.c.a.d Iterable<Short> iterable) {
        h.q2.t.i0.f(iterable, "$this$sum");
        Iterator<Short> it = iterable.iterator();
        int iShortValue = 0;
        while (it.hasNext()) {
            iShortValue += it.next().shortValue();
        }
        return iShortValue;
    }

    public static final <T> int a(@i.c.a.d List<? extends T> list, T t) {
        h.q2.t.i0.f(list, "$this$indexOf");
        return list.indexOf(t);
    }

    @h.m2.f
    @h.t0(version = "1.3")
    private static final <T> T c(@i.c.a.d Collection<? extends T> collection) {
        return (T) a((Collection) collection, (h.u2.f) h.u2.f.f16499c);
    }

    @h.m2.f
    @h.t0(version = "1.3")
    @h.j
    private static final <T> T d(@i.c.a.d Collection<? extends T> collection) {
        return (T) b((Collection) collection, (h.u2.f) h.u2.f.f16499c);
    }

    @i.c.a.d
    public static final double[] h(@i.c.a.d Collection<Double> collection) {
        h.q2.t.i0.f(collection, "$this$toDoubleArray");
        double[] dArr = new double[collection.size()];
        Iterator<Double> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            dArr[i2] = it.next().doubleValue();
            i2++;
        }
        return dArr;
    }

    @i.c.a.d
    public static final <T, K> List<T> i(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, ? extends K> lVar) {
        h.q2.t.i0.f(iterable, "$this$distinctBy");
        h.q2.t.i0.f(lVar, "selector");
        HashSet hashSet = new HashSet();
        ArrayList arrayList = new ArrayList();
        for (T t : iterable) {
            if (hashSet.add(lVar.invoke(t))) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @h.q2.e(name = "averageOfFloat")
    public static final double l(@i.c.a.d Iterable<Float> iterable) {
        h.q2.t.i0.f(iterable, "$this$average");
        Iterator<Float> it = iterable.iterator();
        double dFloatValue = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            dFloatValue += it.next().floatValue();
            i2++;
            if (i2 < 0) {
                y.e();
            }
        }
        return i2 == 0 ? h.q2.t.w.f16453f.d() : dFloatValue / i2;
    }

    @h.q2.e(name = "averageOfInt")
    public static final double m(@i.c.a.d Iterable<Integer> iterable) {
        h.q2.t.i0.f(iterable, "$this$average");
        Iterator<Integer> it = iterable.iterator();
        double dIntValue = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            dIntValue += it.next().intValue();
            i2++;
            if (i2 < 0) {
                y.e();
            }
        }
        return i2 == 0 ? h.q2.t.w.f16453f.d() : dIntValue / i2;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v1, types: [java.lang.Object] */
    @h.m2.f
    private static final <T> T n(@i.c.a.d Iterable<? extends T> iterable, h.q2.s.l<? super T, Boolean> lVar) {
        T t = null;
        for (T t2 : iterable) {
            if (lVar.invoke(t2).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    public static final <T> int p(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$count");
        if (iterable instanceof Collection) {
            return ((Collection) iterable).size();
        }
        int i2 = 0;
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            it.next();
            i2++;
            if (i2 < 0) {
                y.e();
            }
        }
        return i2;
    }

    @h.t0(version = "1.1")
    @i.c.a.d
    public static final <T, C extends Iterable<? extends T>> C D(@i.c.a.d C c2, @i.c.a.d h.q2.s.l<? super T, h.y1> lVar) {
        h.q2.t.i0.f(c2, "$this$onEach");
        h.q2.t.i0.f(lVar, "action");
        Iterator<T> it = c2.iterator();
        while (it.hasNext()) {
            lVar.invoke(it.next());
        }
        return c2;
    }

    @h.t0(version = "1.3")
    public static final <T> T a(@i.c.a.d Collection<? extends T> collection, @i.c.a.d h.u2.f fVar) {
        h.q2.t.i0.f(collection, "$this$random");
        h.q2.t.i0.f(fVar, "random");
        if (!collection.isEmpty()) {
            return (T) d(collection, fVar.c(collection.size()));
        }
        throw new NoSuchElementException("Collection is empty.");
    }

    @i.c.a.d
    public static <T> List<T> c(@i.c.a.d Iterable<? extends T> iterable, int i2) {
        ArrayList arrayList;
        h.q2.t.i0.f(iterable, "$this$drop");
        int i3 = 0;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        }
        if (i2 == 0) {
            return N(iterable);
        }
        if (iterable instanceof Collection) {
            Collection collection = (Collection) iterable;
            int size = collection.size() - i2;
            if (size <= 0) {
                return y.b();
            }
            if (size == 1) {
                return x.a(v(iterable));
            }
            arrayList = new ArrayList(size);
            if (iterable instanceof List) {
                if (iterable instanceof RandomAccess) {
                    int size2 = collection.size();
                    while (i2 < size2) {
                        arrayList.add(((List) iterable).get(i2));
                        i2++;
                    }
                } else {
                    ListIterator listIterator = ((List) iterable).listIterator(i2);
                    while (listIterator.hasNext()) {
                        arrayList.add(listIterator.next());
                    }
                }
                return arrayList;
            }
        } else {
            arrayList = new ArrayList();
        }
        for (T t : iterable) {
            if (i3 >= i2) {
                arrayList.add(t);
            } else {
                i3++;
            }
        }
        return y.b((List) arrayList);
    }

    /* JADX WARN: Multi-variable type inference failed */
    @i.c.a.d
    public static final <T> List<T> d(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d Comparator<? super T> comparator) {
        h.q2.t.i0.f(iterable, "$this$sortedWith");
        h.q2.t.i0.f(comparator, "comparator");
        if (iterable instanceof Collection) {
            Collection collection = (Collection) iterable;
            if (collection.size() <= 1) {
                return N(iterable);
            }
            Object[] array = collection.toArray(new Object[0]);
            if (array == null) {
                throw new h.e1("null cannot be cast to non-null type kotlin.Array<T>");
            }
            if (array != null) {
                q.a(array, (Comparator) comparator);
                return q.d((Object[]) array);
            }
            throw new h.e1("null cannot be cast to non-null type kotlin.Array<T>");
        }
        List<T> listO = O(iterable);
        c0.b(listO, comparator);
        return listO;
    }

    @h.m2.f
    private static final <T> T e(@i.c.a.d List<? extends T> list, int i2) {
        return (T) f((List) list, i2);
    }

    @i.c.a.d
    public static final <T> List<T> f(@i.c.a.d Iterable<? extends T> iterable, int i2) {
        h.q2.t.i0.f(iterable, "$this$take");
        int i3 = 0;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        }
        if (i2 == 0) {
            return y.b();
        }
        if (iterable instanceof Collection) {
            if (i2 >= ((Collection) iterable).size()) {
                return N(iterable);
            }
            if (i2 == 1) {
                return x.a(t(iterable));
            }
        }
        ArrayList arrayList = new ArrayList(i2);
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            arrayList.add(it.next());
            i3++;
            if (i3 == i2) {
                break;
            }
        }
        return y.b((List) arrayList);
    }

    @i.c.a.d
    public static final <T> List<T> g(@i.c.a.d List<? extends T> list, int i2) {
        h.q2.t.i0.f(list, "$this$takeLast");
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        }
        if (i2 == 0) {
            return y.b();
        }
        int size = list.size();
        if (i2 >= size) {
            return N(list);
        }
        if (i2 == 1) {
            return x.a(w.r((List) list));
        }
        ArrayList arrayList = new ArrayList(i2);
        if (list instanceof RandomAccess) {
            for (int i3 = size - i2; i3 < size; i3++) {
                arrayList.add(list.get(i3));
            }
        } else {
            ListIterator<? extends T> listIterator = list.listIterator(size - i2);
            while (listIterator.hasNext()) {
                arrayList.add(listIterator.next());
            }
        }
        return arrayList;
    }

    public static final <T, R extends Comparable<? super R>> void j(@i.c.a.d List<T> list, @i.c.a.d h.q2.s.l<? super T, ? extends R> lVar) {
        h.q2.t.i0.f(list, "$this$sortByDescending");
        h.q2.t.i0.f(lVar, "selector");
        if (list.size() > 1) {
            c0.b(list, new b.d(lVar));
        }
    }

    @i.c.a.d
    public static final <T> List<T> q(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$distinct");
        return N(P(iterable));
    }

    @h.m2.e
    public static final <T> void r(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, h.y1> lVar) {
        h.q2.t.i0.f(iterable, "$this$forEach");
        h.q2.t.i0.f(lVar, "action");
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            lVar.invoke(it.next());
        }
    }

    @h.t0(version = "1.1")
    @i.c.a.d
    public static final <T, K> n0<T, K> t(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, ? extends K> lVar) {
        h.q2.t.i0.f(iterable, "$this$groupingBy");
        h.q2.t.i0.f(lVar, "keySelector");
        return new c(iterable, lVar);
    }

    @i.c.a.d
    public static final <T> h.i0<List<T>, List<T>> E(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$partition");
        h.q2.t.i0.f(lVar, "predicate");
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        for (T t : iterable) {
            if (lVar.invoke(t).booleanValue()) {
                arrayList.add(t);
            } else {
                arrayList2.add(t);
            }
        }
        return new h.i0<>(arrayList, arrayList2);
    }

    public static final <T> int e(@i.c.a.d List<? extends T> list, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(list, "$this$indexOfFirst");
        h.q2.t.i0.f(lVar, "predicate");
        Iterator<? extends T> it = list.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            if (lVar.invoke(it.next()).booleanValue()) {
                return i2;
            }
            i2++;
        }
        return -1;
    }

    @i.c.a.d
    public static final int[] j(@i.c.a.d Collection<Integer> collection) {
        h.q2.t.i0.f(collection, "$this$toIntArray");
        int[] iArr = new int[collection.size()];
        Iterator<Integer> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            iArr[i2] = it.next().intValue();
            i2++;
        }
        return iArr;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @i.c.a.d
    public static final <T> List<T> t(@i.c.a.d List<? extends T> list) {
        h.q2.t.i0.f(list, "$this$requireNoNulls");
        Iterator it = list.iterator();
        while (it.hasNext()) {
            if (it.next() == null) {
                throw new IllegalArgumentException("null element found in " + list + '.');
            }
        }
        return list;
    }

    public static final <T> int u(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$indexOfFirst");
        h.q2.t.i0.f(lVar, "predicate");
        int i2 = 0;
        for (T t : iterable) {
            if (i2 < 0) {
                if (!h.m2.l.a(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                y.f();
            }
            if (lVar.invoke(t).booleanValue()) {
                return i2;
            }
            i2++;
        }
        return -1;
    }

    public static final <T> boolean C(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$none");
        h.q2.t.i0.f(lVar, "predicate");
        if ((iterable instanceof Collection) && ((Collection) iterable).isEmpty()) {
            return true;
        }
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            if (lVar.invoke(it.next()).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    @h.m2.f
    private static final <T> T b(@i.c.a.d List<? extends T> list, int i2, h.q2.s.l<? super Integer, ? extends T> lVar) {
        return (i2 < 0 || i2 > y.a((List) list)) ? lVar.invoke(Integer.valueOf(i2)) : list.get(i2);
    }

    public static final <T> int h(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$count");
        h.q2.t.i0.f(lVar, "predicate");
        if ((iterable instanceof Collection) && ((Collection) iterable).isEmpty()) {
            return 0;
        }
        Iterator<? extends T> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            if (lVar.invoke(it.next()).booleanValue() && (i2 = i2 + 1) < 0) {
                if (!h.m2.l.a(1, 3, 0)) {
                    throw new ArithmeticException("Count overflow has happened.");
                }
                y.e();
            }
        }
        return i2;
    }

    /* JADX WARN: Type inference failed for: r0v2, types: [T, java.lang.Object] */
    @h.m2.f
    private static final <T> T m(@i.c.a.d Iterable<? extends T> iterable, h.q2.s.l<? super T, Boolean> lVar) {
        for (T t : iterable) {
            if (lVar.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    @i.c.a.d
    public static final <T> List<T> a(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.p<? super Integer, ? super T, Boolean> pVar) {
        h.q2.t.i0.f(iterable, "$this$filterIndexed");
        h.q2.t.i0.f(pVar, "predicate");
        ArrayList arrayList = new ArrayList();
        int i2 = 0;
        for (T t : iterable) {
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!h.m2.l.a(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                y.f();
            }
            if (pVar.invoke(Integer.valueOf(i2), t).booleanValue()) {
                arrayList.add(t);
            }
            i2 = i3;
        }
        return arrayList;
    }

    public static final <T> int b(@i.c.a.d Iterable<? extends T> iterable, T t) {
        h.q2.t.i0.f(iterable, "$this$indexOf");
        if (iterable instanceof List) {
            return ((List) iterable).indexOf(t);
        }
        int i2 = 0;
        for (T t2 : iterable) {
            if (i2 < 0) {
                y.f();
            }
            if (h.q2.t.i0.a(t, t2)) {
                return i2;
            }
            i2++;
        }
        return -1;
    }

    @i.c.a.d
    public static final boolean[] e(@i.c.a.d Collection<Boolean> collection) {
        h.q2.t.i0.f(collection, "$this$toBooleanArray");
        boolean[] zArr = new boolean[collection.size()];
        Iterator<Boolean> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            zArr[i2] = it.next().booleanValue();
            i2++;
        }
        return zArr;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @i.c.a.d
    public static final <T> Iterable<T> A(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$requireNoNulls");
        Iterator it = iterable.iterator();
        while (it.hasNext()) {
            if (it.next() == null) {
                throw new IllegalArgumentException("null element found in " + iterable + '.');
            }
        }
        return iterable;
    }

    @h.t0(version = "1.2")
    @i.c.a.d
    public static final <T, R> List<R> h(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.p<? super T, ? super T, ? extends R> pVar) {
        h.q2.t.i0.f(iterable, "$this$zipWithNext");
        h.q2.t.i0.f(pVar, "transform");
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return y.b();
        }
        ArrayList arrayList = new ArrayList();
        a.a.a next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            arrayList.add(pVar.invoke(next, next2));
            next = next2;
        }
        return arrayList;
    }

    @h.q2.e(name = "averageOfByte")
    public static final double j(@i.c.a.d Iterable<Byte> iterable) {
        h.q2.t.i0.f(iterable, "$this$average");
        Iterator<Byte> it = iterable.iterator();
        double dByteValue = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            dByteValue += it.next().byteValue();
            i2++;
            if (i2 < 0) {
                y.e();
            }
        }
        return i2 == 0 ? h.q2.t.w.f16453f.d() : dByteValue / i2;
    }

    public static final <T> T u(@i.c.a.d List<? extends T> list) {
        h.q2.t.i0.f(list, "$this$single");
        int size = list.size();
        if (size == 0) {
            throw new NoSuchElementException("List is empty.");
        }
        if (size == 1) {
            return list.get(0);
        }
        throw new IllegalArgumentException("List has more than one element.");
    }

    public static final <T extends Comparable<? super T>> void w(@i.c.a.d List<T> list) {
        h.q2.t.i0.f(list, "$this$sortDescending");
        c0.b(list, h.h2.b.d());
    }

    @i.c.a.d
    public static <T> h.x2.m<T> i(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$asSequence");
        return new a(iterable);
    }

    @i.c.a.e
    public static final <T> T v(@i.c.a.d List<? extends T> list) {
        h.q2.t.i0.f(list, "$this$singleOrNull");
        if (list.size() == 1) {
            return list.get(0);
        }
        return null;
    }

    @h.t0(version = "1.1")
    @i.c.a.e
    /* renamed from: x, reason: collision with other method in class */
    public static final Float m768x(@i.c.a.d Iterable<Float> iterable) {
        h.q2.t.i0.f(iterable, "$this$max");
        Iterator<Float> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        float fFloatValue = it.next().floatValue();
        if (Float.isNaN(fFloatValue)) {
            return Float.valueOf(fFloatValue);
        }
        while (it.hasNext()) {
            float fFloatValue2 = it.next().floatValue();
            if (Float.isNaN(fFloatValue2)) {
                return Float.valueOf(fFloatValue2);
            }
            if (fFloatValue < fFloatValue2) {
                fFloatValue = fFloatValue2;
            }
        }
        return Float.valueOf(fFloatValue);
    }

    @i.c.a.d
    public static final /* synthetic */ <R, C extends Collection<? super R>> C a(@i.c.a.d Iterable<?> iterable, @i.c.a.d C c2) {
        h.q2.t.i0.f(iterable, "$this$filterIsInstanceTo");
        h.q2.t.i0.f(c2, "destination");
        for (Object obj : iterable) {
            h.q2.t.i0.a(3, "R");
            if (obj instanceof Object) {
                c2.add(obj);
            }
        }
        return c2;
    }

    @i.c.a.d
    public static final <T, K, M extends Map<? super K, List<T>>> M d(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d M m2, @i.c.a.d h.q2.s.l<? super T, ? extends K> lVar) {
        h.q2.t.i0.f(iterable, "$this$groupByTo");
        h.q2.t.i0.f(m2, "destination");
        h.q2.t.i0.f(lVar, "keySelector");
        for (T t : iterable) {
            K kInvoke = lVar.invoke(t);
            Object arrayList = m2.get(kInvoke);
            if (arrayList == null) {
                arrayList = new ArrayList();
                m2.put(kInvoke, arrayList);
            }
            ((List) arrayList).add(t);
        }
        return m2;
    }

    @i.c.a.d
    public static final <T, K, V> Map<K, V> e(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, ? extends h.i0<? extends K, ? extends V>> lVar) {
        h.q2.t.i0.f(iterable, "$this$associate");
        h.q2.t.i0.f(lVar, "transform");
        LinkedHashMap linkedHashMap = new LinkedHashMap(h.v2.q.a(b1.b(z.a(iterable, 10)), 16));
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            h.i0<? extends K, ? extends V> i0VarInvoke = lVar.invoke(it.next());
            linkedHashMap.put(i0VarInvoke.getFirst(), i0VarInvoke.getSecond());
        }
        return linkedHashMap;
    }

    @h.t0(version = "1.1")
    @i.c.a.e
    /* renamed from: y, reason: collision with other method in class */
    public static final Float m770y(@i.c.a.d Iterable<Float> iterable) {
        h.q2.t.i0.f(iterable, "$this$min");
        Iterator<Float> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        float fFloatValue = it.next().floatValue();
        if (Float.isNaN(fFloatValue)) {
            return Float.valueOf(fFloatValue);
        }
        while (it.hasNext()) {
            float fFloatValue2 = it.next().floatValue();
            if (Float.isNaN(fFloatValue2)) {
                return Float.valueOf(fFloatValue2);
            }
            if (fFloatValue > fFloatValue2) {
                fFloatValue = fFloatValue2;
            }
        }
        return Float.valueOf(fFloatValue);
    }

    @i.c.a.d
    public static final <T, C extends Collection<? super T>> C a(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d C c2, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$filterNotTo");
        h.q2.t.i0.f(c2, "destination");
        h.q2.t.i0.f(lVar, "predicate");
        for (T t : iterable) {
            if (!lVar.invoke(t).booleanValue()) {
                c2.add(t);
            }
        }
        return c2;
    }

    public static final <T> int b(@i.c.a.d List<? extends T> list, T t) {
        h.q2.t.i0.f(list, "$this$lastIndexOf");
        return list.lastIndexOf(t);
    }

    @i.c.a.d
    public static final <T> List<T> a(@i.c.a.d List<? extends T> list, @i.c.a.d h.v2.k kVar) {
        h.q2.t.i0.f(list, "$this$slice");
        h.q2.t.i0.f(kVar, "indices");
        return kVar.isEmpty() ? y.b() : N(list.subList(kVar.getStart().intValue(), kVar.getEndInclusive().intValue() + 1));
    }

    @h.t0(version = "1.3")
    @h.j
    @i.c.a.e
    public static final <T> T b(@i.c.a.d Collection<? extends T> collection, @i.c.a.d h.u2.f fVar) {
        h.q2.t.i0.f(collection, "$this$randomOrNull");
        h.q2.t.i0.f(fVar, "random");
        if (collection.isEmpty()) {
            return null;
        }
        return (T) d(collection, fVar.c(collection.size()));
    }

    @i.c.a.d
    public static final byte[] f(@i.c.a.d Collection<Byte> collection) {
        h.q2.t.i0.f(collection, "$this$toByteArray");
        byte[] bArr = new byte[collection.size()];
        Iterator<Byte> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            bArr[i2] = it.next().byteValue();
            i2++;
        }
        return bArr;
    }

    @i.c.a.d
    public static final <T> List<T> a(@i.c.a.d List<? extends T> list, @i.c.a.d Iterable<Integer> iterable) {
        h.q2.t.i0.f(list, "$this$slice");
        h.q2.t.i0.f(iterable, "indices");
        int iA = z.a(iterable, 10);
        if (iA == 0) {
            return y.b();
        }
        ArrayList arrayList = new ArrayList(iA);
        Iterator<Integer> it = iterable.iterator();
        while (it.hasNext()) {
            arrayList.add(list.get(it.next().intValue()));
        }
        return arrayList;
    }

    @i.c.a.d
    public static final <C extends Collection<? super T>, T> C b(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d C c2) {
        h.q2.t.i0.f(iterable, "$this$filterNotNullTo");
        h.q2.t.i0.f(c2, "destination");
        for (T t : iterable) {
            if (t != null) {
                c2.add(t);
            }
        }
        return c2;
    }

    @i.c.a.d
    public static final <T, R, C extends Collection<? super R>> C e(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d C c2, @i.c.a.d h.q2.s.l<? super T, ? extends R> lVar) {
        h.q2.t.i0.f(iterable, "$this$mapTo");
        h.q2.t.i0.f(c2, "destination");
        h.q2.t.i0.f(lVar, "transform");
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            c2.add(lVar.invoke(it.next()));
        }
        return c2;
    }

    @i.c.a.d
    public static final char[] g(@i.c.a.d Collection<Character> collection) {
        h.q2.t.i0.f(collection, "$this$toCharArray");
        char[] cArr = new char[collection.size()];
        Iterator<Character> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            cArr[i2] = it.next().charValue();
            i2++;
        }
        return cArr;
    }

    @i.c.a.d
    public static final long[] k(@i.c.a.d Collection<Long> collection) {
        h.q2.t.i0.f(collection, "$this$toLongArray");
        long[] jArr = new long[collection.size()];
        Iterator<Long> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            jArr[i2] = it.next().longValue();
            i2++;
        }
        return jArr;
    }

    @i.c.a.d
    public static final <T, C extends Collection<? super T>> C b(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d C c2, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$filterTo");
        h.q2.t.i0.f(c2, "destination");
        h.q2.t.i0.f(lVar, "predicate");
        for (T t : iterable) {
            if (lVar.invoke(t).booleanValue()) {
                c2.add(t);
            }
        }
        return c2;
    }

    @i.c.a.d
    public static final <T, K, V, M extends Map<? super K, ? super V>> M b(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d M m2, @i.c.a.d h.q2.s.l<? super T, ? extends h.i0<? extends K, ? extends V>> lVar) {
        h.q2.t.i0.f(iterable, "$this$associateTo");
        h.q2.t.i0.f(m2, "destination");
        h.q2.t.i0.f(lVar, "transform");
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            h.i0<? extends K, ? extends V> i0VarInvoke = lVar.invoke(it.next());
            m2.put(i0VarInvoke.getFirst(), i0VarInvoke.getSecond());
        }
        return m2;
    }

    @i.c.a.d
    public static final <T> Set<T> e(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d Iterable<? extends T> iterable2) {
        h.q2.t.i0.f(iterable, "$this$subtract");
        h.q2.t.i0.f(iterable2, DispatchConstants.OTHER);
        Set<T> setP = P(iterable);
        d0.d(setP, iterable2);
        return setP;
    }

    @i.c.a.d
    public static final <T, K> Map<K, T> f(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, ? extends K> lVar) {
        h.q2.t.i0.f(iterable, "$this$associateBy");
        h.q2.t.i0.f(lVar, "keySelector");
        LinkedHashMap linkedHashMap = new LinkedHashMap(h.v2.q.a(b1.b(z.a(iterable, 10)), 16));
        for (T t : iterable) {
            linkedHashMap.put(lVar.invoke(t), t);
        }
        return linkedHashMap;
    }

    @i.c.a.d
    public static final <T, R> List<R> d(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.p<? super Integer, ? super T, ? extends R> pVar) {
        h.q2.t.i0.f(iterable, "$this$mapIndexedNotNull");
        h.q2.t.i0.f(pVar, "transform");
        ArrayList arrayList = new ArrayList();
        int i2 = 0;
        for (T t : iterable) {
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!h.m2.l.a(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                y.f();
            }
            R rInvoke = pVar.invoke(Integer.valueOf(i2), t);
            if (rInvoke != null) {
                arrayList.add(rInvoke);
            }
            i2 = i3;
        }
        return arrayList;
    }

    @h.t0(version = "1.3")
    @i.c.a.d
    public static final <K, V> Map<K, V> g(@i.c.a.d Iterable<? extends K> iterable, @i.c.a.d h.q2.s.l<? super K, ? extends V> lVar) {
        h.q2.t.i0.f(iterable, "$this$associateWith");
        h.q2.t.i0.f(lVar, "valueSelector");
        LinkedHashMap linkedHashMap = new LinkedHashMap(h.v2.q.a(b1.b(z.a(iterable, 10)), 16));
        for (K k2 : iterable) {
            linkedHashMap.put(k2, lVar.invoke(k2));
        }
        return linkedHashMap;
    }

    @h.q2.e(name = "averageOfDouble")
    public static final double k(@i.c.a.d Iterable<Double> iterable) {
        h.q2.t.i0.f(iterable, "$this$average");
        Iterator<Double> it = iterable.iterator();
        double dDoubleValue = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            dDoubleValue += it.next().doubleValue();
            i2++;
            if (i2 < 0) {
                y.e();
            }
        }
        return i2 == 0 ? h.q2.t.w.f16453f.d() : dDoubleValue / i2;
    }

    @i.c.a.e
    public static final <T extends Comparable<? super T>> T x(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$max");
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            if (next.compareTo(next2) < 0) {
                next = next2;
            }
        }
        return next;
    }

    @i.c.a.d
    public static final <T, K, V> Map<K, List<V>> b(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, ? extends K> lVar, @i.c.a.d h.q2.s.l<? super T, ? extends V> lVar2) {
        h.q2.t.i0.f(iterable, "$this$groupBy");
        h.q2.t.i0.f(lVar, "keySelector");
        h.q2.t.i0.f(lVar2, "valueTransform");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (T t : iterable) {
            K kInvoke = lVar.invoke(t);
            List<V> arrayList = linkedHashMap.get(kInvoke);
            if (arrayList == null) {
                arrayList = new ArrayList<>();
                linkedHashMap.put(kInvoke, arrayList);
            }
            arrayList.add(lVar2.invoke(t));
        }
        return linkedHashMap;
    }

    public static final <S, T extends S> S e(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.p<? super S, ? super T, ? extends S> pVar) {
        h.q2.t.i0.f(iterable, "$this$reduce");
        h.q2.t.i0.f(pVar, "operation");
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            S next = it.next();
            while (it.hasNext()) {
                next = pVar.invoke(next, it.next());
            }
            return next;
        }
        throw new UnsupportedOperationException("Empty collection can't be reduced.");
    }

    @i.c.a.e
    public static <T extends Comparable<? super T>> T y(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$min");
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            if (next.compareTo(next2) > 0) {
                next = next2;
            }
        }
        return next;
    }

    @i.c.a.d
    public static final <T, K, V> Map<K, V> a(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, ? extends K> lVar, @i.c.a.d h.q2.s.l<? super T, ? extends V> lVar2) {
        h.q2.t.i0.f(iterable, "$this$associateBy");
        h.q2.t.i0.f(lVar, "keySelector");
        h.q2.t.i0.f(lVar2, "valueTransform");
        LinkedHashMap linkedHashMap = new LinkedHashMap(h.v2.q.a(b1.b(z.a(iterable, 10)), 16));
        for (T t : iterable) {
            linkedHashMap.put(lVar.invoke(t), lVar2.invoke(t));
        }
        return linkedHashMap;
    }

    public static final <T> boolean d(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$any");
        h.q2.t.i0.f(lVar, "predicate");
        if ((iterable instanceof Collection) && ((Collection) iterable).isEmpty()) {
            return false;
        }
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            if (lVar.invoke(it.next()).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    @i.c.a.d
    public static final <T> Set<T> f(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d Iterable<? extends T> iterable2) {
        h.q2.t.i0.f(iterable, "$this$union");
        h.q2.t.i0.f(iterable2, DispatchConstants.OTHER);
        Set<T> setP = P(iterable);
        d0.a((Collection) setP, (Iterable) iterable2);
        return setP;
    }

    public static final <T> boolean g(@i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(iterable, "$this$any");
        return iterable instanceof Collection ? !((Collection) iterable).isEmpty() : iterable.iterator().hasNext();
    }

    @i.c.a.d
    public static final <T> List<T> c(@i.c.a.d List<? extends T> list, int i2) {
        h.q2.t.i0.f(list, "$this$dropLast");
        if (i2 >= 0) {
            return f((Iterable) list, h.v2.q.a(list.size() - i2, 0));
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @i.c.a.d
    public static final <T> List<T> d(@i.c.a.d Iterable<? extends T> iterable, T t) {
        h.q2.t.i0.f(iterable, "$this$minus");
        ArrayList arrayList = new ArrayList(z.a(iterable, 10));
        boolean z = false;
        for (T t2 : iterable) {
            boolean z2 = true;
            if (!z && h.q2.t.i0.a(t2, t)) {
                z = true;
                z2 = false;
            }
            if (z2) {
                arrayList.add(t2);
            }
        }
        return arrayList;
    }

    @h.t0(version = "1.3")
    @h.j
    @i.c.a.e
    public static final <S, T extends S> S f(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.p<? super S, ? super T, ? extends S> pVar) {
        h.q2.t.i0.f(iterable, "$this$reduceOrNull");
        h.q2.t.i0.f(pVar, "operation");
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        S next = it.next();
        while (it.hasNext()) {
            next = pVar.invoke(next, it.next());
        }
        return next;
    }

    @h.t0(version = "1.3")
    @h.j
    @i.c.a.d
    public static final <S, T extends S> List<S> g(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.p<? super S, ? super T, ? extends S> pVar) {
        h.q2.t.i0.f(iterable, "$this$scanReduce");
        h.q2.t.i0.f(pVar, "operation");
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return y.b();
        }
        S next = it.next();
        ArrayList arrayList = new ArrayList(z.a(iterable, 10));
        arrayList.add(next);
        while (it.hasNext()) {
            next = pVar.invoke(next, it.next());
            arrayList.add(next);
        }
        return arrayList;
    }

    @i.c.a.d
    public static final <T, K, M extends Map<? super K, ? super T>> M a(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d M m2, @i.c.a.d h.q2.s.l<? super T, ? extends K> lVar) {
        h.q2.t.i0.f(iterable, "$this$associateByTo");
        h.q2.t.i0.f(m2, "destination");
        h.q2.t.i0.f(lVar, "keySelector");
        for (T t : iterable) {
            m2.put(lVar.invoke(t), t);
        }
        return m2;
    }

    @i.c.a.d
    public static final <T> List<T> c(@i.c.a.d List<? extends T> list, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(list, "$this$dropLastWhile");
        h.q2.t.i0.f(lVar, "predicate");
        if (!list.isEmpty()) {
            ListIterator<? extends T> listIterator = list.listIterator(list.size());
            while (listIterator.hasPrevious()) {
                if (!lVar.invoke(listIterator.previous()).booleanValue()) {
                    return f((Iterable) list, listIterator.nextIndex() + 1);
                }
            }
        }
        return y.b();
    }

    @h.m2.f
    private static final <T> List<T> e(@i.c.a.d Iterable<? extends T> iterable, T t) {
        return d(iterable, t);
    }

    @i.c.a.d
    public static final <T, K, V, M extends Map<? super K, ? super V>> M a(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d M m2, @i.c.a.d h.q2.s.l<? super T, ? extends K> lVar, @i.c.a.d h.q2.s.l<? super T, ? extends V> lVar2) {
        h.q2.t.i0.f(iterable, "$this$associateByTo");
        h.q2.t.i0.f(m2, "destination");
        h.q2.t.i0.f(lVar, "keySelector");
        h.q2.t.i0.f(lVar2, "valueTransform");
        for (T t : iterable) {
            m2.put(lVar.invoke(t), lVar2.invoke(t));
        }
        return m2;
    }

    @i.c.a.d
    public static final <T> List<T> d(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d Iterable<? extends T> iterable2) {
        h.q2.t.i0.f(iterable, "$this$plus");
        h.q2.t.i0.f(iterable2, "elements");
        if (iterable instanceof Collection) {
            return b((Collection) iterable, (Iterable) iterable2);
        }
        ArrayList arrayList = new ArrayList();
        d0.a((Collection) arrayList, (Iterable) iterable);
        d0.a((Collection) arrayList, (Iterable) iterable2);
        return arrayList;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @i.c.a.d
    public static final <T, K, V, M extends Map<? super K, List<V>>> M b(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d M m2, @i.c.a.d h.q2.s.l<? super T, ? extends K> lVar, @i.c.a.d h.q2.s.l<? super T, ? extends V> lVar2) {
        h.q2.t.i0.f(iterable, "$this$groupByTo");
        h.q2.t.i0.f(m2, "destination");
        h.q2.t.i0.f(lVar, "keySelector");
        h.q2.t.i0.f(lVar2, "valueTransform");
        for (T t : iterable) {
            K kInvoke = lVar.invoke(t);
            Object arrayList = m2.get(kInvoke);
            if (arrayList == null) {
                arrayList = new ArrayList();
                m2.put(kInvoke, arrayList);
            }
            ((List) arrayList).add(lVar2.invoke(t));
        }
        return m2;
    }

    public static final <T, R> R a(@i.c.a.d Iterable<? extends T> iterable, R r, @i.c.a.d h.q2.s.p<? super R, ? super T, ? extends R> pVar) {
        h.q2.t.i0.f(iterable, "$this$fold");
        h.q2.t.i0.f(pVar, "operation");
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            r = pVar.invoke(r, it.next());
        }
        return r;
    }

    @i.c.a.d
    public static final <T> List<T> f(@i.c.a.d Iterable<? extends T> iterable, T t) {
        h.q2.t.i0.f(iterable, "$this$plus");
        if (iterable instanceof Collection) {
            return a((Collection) iterable, (Object) t);
        }
        ArrayList arrayList = new ArrayList();
        d0.a((Collection) arrayList, (Iterable) iterable);
        arrayList.add(t);
        return arrayList;
    }

    public static final <T, R> R a(@i.c.a.d Iterable<? extends T> iterable, R r, @i.c.a.d h.q2.s.q<? super Integer, ? super R, ? super T, ? extends R> qVar) {
        h.q2.t.i0.f(iterable, "$this$foldIndexed");
        h.q2.t.i0.f(qVar, "operation");
        int i2 = 0;
        for (T t : iterable) {
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!h.m2.l.a(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                y.f();
            }
            r = qVar.invoke(Integer.valueOf(i2), r, t);
            i2 = i3;
        }
        return r;
    }

    public static final <T, R> R a(@i.c.a.d List<? extends T> list, R r, @i.c.a.d h.q2.s.p<? super T, ? super R, ? extends R> pVar) {
        h.q2.t.i0.f(list, "$this$foldRight");
        h.q2.t.i0.f(pVar, "operation");
        if (!list.isEmpty()) {
            ListIterator<? extends T> listIterator = list.listIterator(list.size());
            while (listIterator.hasPrevious()) {
                r = pVar.invoke(listIterator.previous(), r);
            }
        }
        return r;
    }

    @h.t0(version = "1.3")
    @i.c.a.d
    public static final <K, V, M extends Map<? super K, ? super V>> M c(@i.c.a.d Iterable<? extends K> iterable, @i.c.a.d M m2, @i.c.a.d h.q2.s.l<? super K, ? extends V> lVar) {
        h.q2.t.i0.f(iterable, "$this$associateWithTo");
        h.q2.t.i0.f(m2, "destination");
        h.q2.t.i0.f(lVar, "valueSelector");
        for (K k2 : iterable) {
            m2.put(k2, lVar.invoke(k2));
        }
        return m2;
    }

    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    @h.m2.f
    private static final <T> T d(@i.c.a.d List<? extends T> list, h.q2.s.l<? super T, Boolean> lVar) {
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            T tPrevious = listIterator.previous();
            if (lVar.invoke(tPrevious).booleanValue()) {
                return tPrevious;
            }
        }
        return null;
    }

    @h.m2.f
    private static final <T> List<T> g(@i.c.a.d Iterable<? extends T> iterable, T t) {
        return f(iterable, t);
    }

    @i.c.a.d
    public static final <T, R> List<h.i0<T, R>> g(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d Iterable<? extends R> iterable2) {
        h.q2.t.i0.f(iterable, "$this$zip");
        h.q2.t.i0.f(iterable2, DispatchConstants.OTHER);
        Iterator<? extends T> it = iterable.iterator();
        Iterator<? extends R> it2 = iterable2.iterator();
        ArrayList arrayList = new ArrayList(Math.min(z.a(iterable, 10), z.a(iterable2, 10)));
        while (it.hasNext() && it2.hasNext()) {
            arrayList.add(h.c1.a(it.next(), it2.next()));
        }
        return arrayList;
    }

    @i.c.a.d
    public static final <T, C extends Collection<? super T>> C c(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d C c2) {
        h.q2.t.i0.f(iterable, "$this$toCollection");
        h.q2.t.i0.f(c2, "destination");
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            c2.add(it.next());
        }
        return c2;
    }

    public static final <T, R> R a(@i.c.a.d List<? extends T> list, R r, @i.c.a.d h.q2.s.q<? super Integer, ? super T, ? super R, ? extends R> qVar) {
        h.q2.t.i0.f(list, "$this$foldRightIndexed");
        h.q2.t.i0.f(qVar, "operation");
        if (!list.isEmpty()) {
            ListIterator<? extends T> listIterator = list.listIterator(list.size());
            while (listIterator.hasPrevious()) {
                r = qVar.invoke(Integer.valueOf(listIterator.previousIndex()), listIterator.previous(), r);
            }
        }
        return r;
    }

    @i.c.a.d
    public static final <T> Set<T> b(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d Iterable<? extends T> iterable2) {
        h.q2.t.i0.f(iterable, "$this$intersect");
        h.q2.t.i0.f(iterable2, DispatchConstants.OTHER);
        Set<T> setP = P(iterable);
        d0.e(setP, iterable2);
        return setP;
    }

    @i.c.a.d
    public static final <T, R, C extends Collection<? super R>> C c(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d C c2, @i.c.a.d h.q2.s.l<? super T, ? extends Iterable<? extends R>> lVar) {
        h.q2.t.i0.f(iterable, "$this$flatMapTo");
        h.q2.t.i0.f(c2, "destination");
        h.q2.t.i0.f(lVar, "transform");
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            d0.a((Collection) c2, (Iterable) lVar.invoke(it.next()));
        }
        return c2;
    }

    @i.c.a.d
    public static final <T, R, C extends Collection<? super R>> C d(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d C c2, @i.c.a.d h.q2.s.l<? super T, ? extends R> lVar) {
        h.q2.t.i0.f(iterable, "$this$mapNotNullTo");
        h.q2.t.i0.f(c2, "destination");
        h.q2.t.i0.f(lVar, "transform");
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            R rInvoke = lVar.invoke(it.next());
            if (rInvoke != null) {
                c2.add(rInvoke);
            }
        }
        return c2;
    }

    @h.m2.f
    private static final <T> int b(@i.c.a.d Collection<? extends T> collection) {
        return collection.size();
    }

    public static final <T> void b(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.p<? super Integer, ? super T, h.y1> pVar) {
        h.q2.t.i0.f(iterable, "$this$forEachIndexed");
        h.q2.t.i0.f(pVar, "action");
        int i2 = 0;
        for (T t : iterable) {
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!h.m2.l.a(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                y.f();
            }
            pVar.invoke(Integer.valueOf(i2), t);
            i2 = i3;
        }
    }

    @i.c.a.d
    public static final <T, R> List<R> c(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.p<? super Integer, ? super T, ? extends R> pVar) {
        h.q2.t.i0.f(iterable, "$this$mapIndexed");
        h.q2.t.i0.f(pVar, "transform");
        ArrayList arrayList = new ArrayList(z.a(iterable, 10));
        int i2 = 0;
        for (T t : iterable) {
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!h.m2.l.a(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                y.f();
            }
            arrayList.add(pVar.invoke(Integer.valueOf(i2), t));
            i2 = i3;
        }
        return arrayList;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @i.c.a.e
    public static final <T> T b(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d Comparator<? super T> comparator) {
        h.q2.t.i0.f(iterable, "$this$maxWith");
        h.q2.t.i0.f(comparator, "comparator");
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        Object obj = (T) it.next();
        while (it.hasNext()) {
            Object obj2 = (T) it.next();
            if (comparator.compare(obj, obj2) < 0) {
                obj = (T) obj2;
            }
        }
        return (T) obj;
    }

    public static final <S, T extends S> S a(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.q<? super Integer, ? super S, ? super T, ? extends S> qVar) {
        h.q2.t.i0.f(iterable, "$this$reduceIndexed");
        h.q2.t.i0.f(qVar, "operation");
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            S next = it.next();
            int i2 = 1;
            while (it.hasNext()) {
                int i3 = i2 + 1;
                if (i2 < 0) {
                    if (!h.m2.l.a(1, 3, 0)) {
                        throw new ArithmeticException("Index overflow has happened.");
                    }
                    y.f();
                }
                next = qVar.invoke(Integer.valueOf(i2), next, it.next());
                i2 = i3;
            }
            return next;
        }
        throw new UnsupportedOperationException("Empty collection can't be reduced.");
    }

    @i.c.a.d
    public static final <T, R, C extends Collection<? super R>> C c(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d C c2, @i.c.a.d h.q2.s.p<? super Integer, ? super T, ? extends R> pVar) {
        h.q2.t.i0.f(iterable, "$this$mapIndexedTo");
        h.q2.t.i0.f(c2, "destination");
        h.q2.t.i0.f(pVar, "transform");
        int i2 = 0;
        for (T t : iterable) {
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!h.m2.l.a(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                y.f();
            }
            c2.add(pVar.invoke(Integer.valueOf(i2), t));
            i2 = i3;
        }
        return c2;
    }

    public static final <T> boolean c(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.l<? super T, Boolean> lVar) {
        h.q2.t.i0.f(iterable, "$this$all");
        h.q2.t.i0.f(lVar, "predicate");
        if ((iterable instanceof Collection) && ((Collection) iterable).isEmpty()) {
            return true;
        }
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            if (!lVar.invoke(it.next()).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    @h.t0(version = "1.3")
    @h.j
    @i.c.a.e
    public static final <S, T extends S> S b(@i.c.a.d List<? extends T> list, @i.c.a.d h.q2.s.p<? super T, ? super S, ? extends S> pVar) {
        h.q2.t.i0.f(list, "$this$reduceRightOrNull");
        h.q2.t.i0.f(pVar, "operation");
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        if (!listIterator.hasPrevious()) {
            return null;
        }
        S sPrevious = listIterator.previous();
        while (listIterator.hasPrevious()) {
            sPrevious = pVar.invoke(listIterator.previous(), sPrevious);
        }
        return sPrevious;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @i.c.a.e
    public static final <T> T c(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d Comparator<? super T> comparator) {
        h.q2.t.i0.f(iterable, "$this$minWith");
        h.q2.t.i0.f(comparator, "comparator");
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        Object obj = (T) it.next();
        while (it.hasNext()) {
            Object obj2 = (T) it.next();
            if (comparator.compare(obj, obj2) > 0) {
                obj = (T) obj2;
            }
        }
        return (T) obj;
    }

    public static final <S, T extends S> S a(@i.c.a.d List<? extends T> list, @i.c.a.d h.q2.s.p<? super T, ? super S, ? extends S> pVar) {
        h.q2.t.i0.f(list, "$this$reduceRight");
        h.q2.t.i0.f(pVar, "operation");
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        if (listIterator.hasPrevious()) {
            S sPrevious = listIterator.previous();
            while (listIterator.hasPrevious()) {
                sPrevious = pVar.invoke(listIterator.previous(), sPrevious);
            }
            return sPrevious;
        }
        throw new UnsupportedOperationException("Empty list can't be reduced.");
    }

    @h.t0(version = "1.3")
    @h.j
    @i.c.a.d
    public static final <T, R> List<R> b(@i.c.a.d Iterable<? extends T> iterable, R r, @i.c.a.d h.q2.s.p<? super R, ? super T, ? extends R> pVar) {
        h.q2.t.i0.f(iterable, "$this$scan");
        h.q2.t.i0.f(pVar, "operation");
        int iA = z.a(iterable, 9);
        if (iA == 0) {
            return x.a(r);
        }
        ArrayList arrayList = new ArrayList(iA + 1);
        arrayList.add(r);
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            r = pVar.invoke(r, it.next());
            arrayList.add(r);
        }
        return arrayList;
    }

    @i.c.a.d
    public static final <T> List<T> c(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d Iterable<? extends T> iterable2) {
        h.q2.t.i0.f(iterable, "$this$minus");
        h.q2.t.i0.f(iterable2, "elements");
        Collection collectionA = z.a(iterable2, iterable);
        if (collectionA.isEmpty()) {
            return N(iterable);
        }
        ArrayList arrayList = new ArrayList();
        for (T t : iterable) {
            if (!collectionA.contains(t)) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    public static final <S, T extends S> S a(@i.c.a.d List<? extends T> list, @i.c.a.d h.q2.s.q<? super Integer, ? super T, ? super S, ? extends S> qVar) {
        h.q2.t.i0.f(list, "$this$reduceRightIndexed");
        h.q2.t.i0.f(qVar, "operation");
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        if (listIterator.hasPrevious()) {
            S sPrevious = listIterator.previous();
            while (listIterator.hasPrevious()) {
                sPrevious = qVar.invoke(Integer.valueOf(listIterator.previousIndex()), listIterator.previous(), sPrevious);
            }
            return sPrevious;
        }
        throw new UnsupportedOperationException("Empty list can't be reduced.");
    }

    @h.t0(version = "1.3")
    @h.j
    @i.c.a.d
    public static final <T, R> List<R> b(@i.c.a.d Iterable<? extends T> iterable, R r, @i.c.a.d h.q2.s.q<? super Integer, ? super R, ? super T, ? extends R> qVar) {
        h.q2.t.i0.f(iterable, "$this$scanIndexed");
        h.q2.t.i0.f(qVar, "operation");
        int iA = z.a(iterable, 9);
        if (iA == 0) {
            return x.a(r);
        }
        ArrayList arrayList = new ArrayList(iA + 1);
        arrayList.add(r);
        int i2 = 0;
        for (T t : iterable) {
            Integer numValueOf = Integer.valueOf(i2);
            i2++;
            r = qVar.invoke(numValueOf, r, t);
            arrayList.add(r);
        }
        return arrayList;
    }

    @i.c.a.d
    public static final <T, R> List<h.i0<T, R>> c(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d R[] rArr) {
        h.q2.t.i0.f(iterable, "$this$zip");
        h.q2.t.i0.f(rArr, DispatchConstants.OTHER);
        int length = rArr.length;
        ArrayList arrayList = new ArrayList(Math.min(z.a(iterable, 10), length));
        int i2 = 0;
        for (T t : iterable) {
            if (i2 >= length) {
                break;
            }
            arrayList.add(h.c1.a(t, rArr[i2]));
            i2++;
        }
        return arrayList;
    }

    @h.t0(version = "1.2")
    @i.c.a.d
    public static final <T, R> List<R> a(@i.c.a.d Iterable<? extends T> iterable, int i2, @i.c.a.d h.q2.s.l<? super List<? extends T>, ? extends R> lVar) {
        h.q2.t.i0.f(iterable, "$this$chunked");
        h.q2.t.i0.f(lVar, "transform");
        return a((Iterable) iterable, i2, i2, true, (h.q2.s.l) lVar);
    }

    @i.c.a.d
    public static final <T> List<T> a(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d T[] tArr) {
        h.q2.t.i0.f(iterable, "$this$minus");
        h.q2.t.i0.f(tArr, "elements");
        if (tArr.length == 0) {
            return N(iterable);
        }
        HashSet hashSetI = r.I(tArr);
        ArrayList arrayList = new ArrayList();
        for (T t : iterable) {
            if (!hashSetI.contains(t)) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @h.t0(version = "1.3")
    @h.j
    @i.c.a.d
    public static final <S, T extends S> List<S> b(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.q2.s.q<? super Integer, ? super S, ? super T, ? extends S> qVar) {
        h.q2.t.i0.f(iterable, "$this$scanReduceIndexed");
        h.q2.t.i0.f(qVar, "operation");
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return y.b();
        }
        T next = it.next();
        ArrayList arrayList = new ArrayList(z.a(iterable, 10));
        arrayList.add(next);
        S sInvoke = (Object) next;
        int i2 = 1;
        while (it.hasNext()) {
            Integer numValueOf = Integer.valueOf(i2);
            i2++;
            sInvoke = qVar.invoke(numValueOf, sInvoke, it.next());
            arrayList.add(sInvoke);
        }
        return arrayList;
    }

    @i.c.a.d
    public static final <T> List<T> a(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.x2.m<? extends T> mVar) {
        h.q2.t.i0.f(iterable, "$this$minus");
        h.q2.t.i0.f(mVar, "elements");
        HashSet hashSetK = h.x2.u.K(mVar);
        if (hashSetK.isEmpty()) {
            return N(iterable);
        }
        ArrayList arrayList = new ArrayList();
        for (T t : iterable) {
            if (!hashSetK.contains(t)) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @h.t0(version = "1.2")
    @i.c.a.d
    public static final <T> List<List<T>> b(@i.c.a.d Iterable<? extends T> iterable, int i2) {
        h.q2.t.i0.f(iterable, "$this$chunked");
        return a((Iterable) iterable, i2, i2, true);
    }

    @i.c.a.d
    public static final <T> List<T> b(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d T[] tArr) {
        h.q2.t.i0.f(iterable, "$this$plus");
        h.q2.t.i0.f(tArr, "elements");
        if (iterable instanceof Collection) {
            return b((Collection) iterable, (Object[]) tArr);
        }
        ArrayList arrayList = new ArrayList();
        d0.a((Collection) arrayList, (Iterable) iterable);
        d0.a((Collection) arrayList, (Object[]) tArr);
        return arrayList;
    }

    @i.c.a.d
    public static final <T> List<T> a(@i.c.a.d Collection<? extends T> collection, T t) {
        h.q2.t.i0.f(collection, "$this$plus");
        ArrayList arrayList = new ArrayList(collection.size() + 1);
        arrayList.addAll(collection);
        arrayList.add(t);
        return arrayList;
    }

    public static /* synthetic */ List a(Iterable iterable, int i2, int i3, boolean z, int i4, Object obj) {
        if ((i4 & 2) != 0) {
            i3 = 1;
        }
        if ((i4 & 4) != 0) {
            z = false;
        }
        return a(iterable, i2, i3, z);
    }

    @i.c.a.d
    public static final <T> List<T> b(@i.c.a.d Collection<? extends T> collection, @i.c.a.d T[] tArr) {
        h.q2.t.i0.f(collection, "$this$plus");
        h.q2.t.i0.f(tArr, "elements");
        ArrayList arrayList = new ArrayList(collection.size() + tArr.length);
        arrayList.addAll(collection);
        d0.a((Collection) arrayList, (Object[]) tArr);
        return arrayList;
    }

    @h.t0(version = "1.2")
    @i.c.a.d
    public static final <T> List<List<T>> a(@i.c.a.d Iterable<? extends T> iterable, int i2, int i3, boolean z) {
        h.q2.t.i0.f(iterable, "$this$windowed");
        p1.a(i2, i3);
        if ((iterable instanceof RandomAccess) && (iterable instanceof List)) {
            List list = (List) iterable;
            int size = list.size();
            ArrayList arrayList = new ArrayList((size / i3) + (size % i3 == 0 ? 0 : 1));
            int i4 = 0;
            while (i4 >= 0 && size > i4) {
                int iB = h.v2.q.b(i2, size - i4);
                if (iB < i2 && !z) {
                    break;
                }
                ArrayList arrayList2 = new ArrayList(iB);
                for (int i5 = 0; i5 < iB; i5++) {
                    arrayList2.add(list.get(i5 + i4));
                }
                arrayList.add(arrayList2);
                i4 += i3;
            }
            return arrayList;
        }
        ArrayList arrayList3 = new ArrayList();
        Iterator itA = p1.a((Iterator) iterable.iterator(), i2, i3, z, false);
        while (itA.hasNext()) {
            arrayList3.add((List) itA.next());
        }
        return arrayList3;
    }

    @i.c.a.d
    public static final <T> List<T> b(@i.c.a.d Collection<? extends T> collection, @i.c.a.d Iterable<? extends T> iterable) {
        h.q2.t.i0.f(collection, "$this$plus");
        h.q2.t.i0.f(iterable, "elements");
        if (iterable instanceof Collection) {
            Collection collection2 = (Collection) iterable;
            ArrayList arrayList = new ArrayList(collection.size() + collection2.size());
            arrayList.addAll(collection);
            arrayList.addAll(collection2);
            return arrayList;
        }
        ArrayList arrayList2 = new ArrayList(collection);
        d0.a((Collection) arrayList2, (Iterable) iterable);
        return arrayList2;
    }

    @i.c.a.d
    public static final <T> List<T> b(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d h.x2.m<? extends T> mVar) {
        h.q2.t.i0.f(iterable, "$this$plus");
        h.q2.t.i0.f(mVar, "elements");
        ArrayList arrayList = new ArrayList();
        d0.a((Collection) arrayList, (Iterable) iterable);
        d0.a((Collection) arrayList, (h.x2.m) mVar);
        return arrayList;
    }

    public static /* synthetic */ List a(Iterable iterable, int i2, int i3, boolean z, h.q2.s.l lVar, int i4, Object obj) {
        if ((i4 & 2) != 0) {
            i3 = 1;
        }
        if ((i4 & 4) != 0) {
            z = false;
        }
        return a(iterable, i2, i3, z, lVar);
    }

    @i.c.a.d
    public static final <T> List<T> b(@i.c.a.d Collection<? extends T> collection, @i.c.a.d h.x2.m<? extends T> mVar) {
        h.q2.t.i0.f(collection, "$this$plus");
        h.q2.t.i0.f(mVar, "elements");
        ArrayList arrayList = new ArrayList(collection.size() + 10);
        arrayList.addAll(collection);
        d0.a((Collection) arrayList, (h.x2.m) mVar);
        return arrayList;
    }

    @h.t0(version = "1.2")
    @i.c.a.d
    public static final <T, R> List<R> a(@i.c.a.d Iterable<? extends T> iterable, int i2, int i3, boolean z, @i.c.a.d h.q2.s.l<? super List<? extends T>, ? extends R> lVar) {
        h.q2.t.i0.f(iterable, "$this$windowed");
        h.q2.t.i0.f(lVar, "transform");
        p1.a(i2, i3);
        if ((iterable instanceof RandomAccess) && (iterable instanceof List)) {
            List list = (List) iterable;
            int size = list.size();
            int i4 = 0;
            ArrayList arrayList = new ArrayList((size / i3) + (size % i3 == 0 ? 0 : 1));
            e1 e1Var = new e1(list);
            while (i4 >= 0 && size > i4) {
                int iB = h.v2.q.b(i2, size - i4);
                if (!z && iB < i2) {
                    break;
                }
                e1Var.a(i4, iB + i4);
                arrayList.add(lVar.invoke(e1Var));
                i4 += i3;
            }
            return arrayList;
        }
        ArrayList arrayList2 = new ArrayList();
        Iterator itA = p1.a((Iterator) iterable.iterator(), i2, i3, z, true);
        while (itA.hasNext()) {
            arrayList2.add(lVar.invoke((List) itA.next()));
        }
        return arrayList2;
    }

    @h.m2.f
    private static final <T> List<T> b(@i.c.a.d Collection<? extends T> collection, T t) {
        return a((Collection) collection, (Object) t);
    }

    @i.c.a.d
    public static final <T, R, C extends Collection<? super R>> C b(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d C c2, @i.c.a.d h.q2.s.p<? super Integer, ? super T, ? extends R> pVar) {
        h.q2.t.i0.f(iterable, "$this$mapIndexedNotNullTo");
        h.q2.t.i0.f(c2, "destination");
        h.q2.t.i0.f(pVar, "transform");
        int i2 = 0;
        for (T t : iterable) {
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!h.m2.l.a(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                y.f();
            }
            R rInvoke = pVar.invoke(Integer.valueOf(i2), t);
            if (rInvoke != null) {
                c2.add(rInvoke);
            }
            i2 = i3;
        }
        return c2;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @i.c.a.d
    public static final <T, R, V> List<V> a(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d R[] rArr, @i.c.a.d h.q2.s.p<? super T, ? super R, ? extends V> pVar) {
        h.q2.t.i0.f(iterable, "$this$zip");
        h.q2.t.i0.f(rArr, DispatchConstants.OTHER);
        h.q2.t.i0.f(pVar, "transform");
        int length = rArr.length;
        ArrayList arrayList = new ArrayList(Math.min(z.a(iterable, 10), length));
        int i2 = 0;
        for (T t : iterable) {
            if (i2 >= length) {
                break;
            }
            arrayList.add(pVar.invoke(t, rArr[i2]));
            i2++;
        }
        return arrayList;
    }

    @i.c.a.d
    public static final <T, R, V> List<V> a(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d Iterable<? extends R> iterable2, @i.c.a.d h.q2.s.p<? super T, ? super R, ? extends V> pVar) {
        h.q2.t.i0.f(iterable, "$this$zip");
        h.q2.t.i0.f(iterable2, DispatchConstants.OTHER);
        h.q2.t.i0.f(pVar, "transform");
        Iterator<? extends T> it = iterable.iterator();
        Iterator<? extends R> it2 = iterable2.iterator();
        ArrayList arrayList = new ArrayList(Math.min(z.a(iterable, 10), z.a(iterable2, 10)));
        while (it.hasNext() && it2.hasNext()) {
            arrayList.add(pVar.invoke(it.next(), it2.next()));
        }
        return arrayList;
    }

    @i.c.a.d
    public static final <T, A extends Appendable> A a(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d A a2, @i.c.a.d CharSequence charSequence, @i.c.a.d CharSequence charSequence2, @i.c.a.d CharSequence charSequence3, int i2, @i.c.a.d CharSequence charSequence4, @i.c.a.e h.q2.s.l<? super T, ? extends CharSequence> lVar) throws IOException {
        h.q2.t.i0.f(iterable, "$this$joinTo");
        h.q2.t.i0.f(a2, "buffer");
        h.q2.t.i0.f(charSequence, "separator");
        h.q2.t.i0.f(charSequence2, RequestParameters.PREFIX);
        h.q2.t.i0.f(charSequence3, "postfix");
        h.q2.t.i0.f(charSequence4, "truncated");
        a2.append(charSequence2);
        int i3 = 0;
        for (T t : iterable) {
            i3++;
            if (i3 > 1) {
                a2.append(charSequence);
            }
            if (i2 >= 0 && i3 > i2) {
                break;
            }
            h.z2.t.a(a2, t, lVar);
        }
        if (i2 >= 0 && i3 > i2) {
            a2.append(charSequence4);
        }
        a2.append(charSequence3);
        return a2;
    }

    public static /* synthetic */ String a(Iterable iterable, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i2, CharSequence charSequence4, h.q2.s.l lVar, int i3, Object obj) {
        if ((i3 & 1) != 0) {
            charSequence = ", ";
        }
        CharSequence charSequence5 = (i3 & 2) != 0 ? "" : charSequence2;
        CharSequence charSequence6 = (i3 & 4) == 0 ? charSequence3 : "";
        int i4 = (i3 & 8) != 0 ? -1 : i2;
        if ((i3 & 16) != 0) {
            charSequence4 = "...";
        }
        CharSequence charSequence7 = charSequence4;
        if ((i3 & 32) != 0) {
            lVar = null;
        }
        return a(iterable, charSequence, charSequence5, charSequence6, i4, charSequence7, lVar);
    }

    @i.c.a.d
    public static final <T> String a(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d CharSequence charSequence, @i.c.a.d CharSequence charSequence2, @i.c.a.d CharSequence charSequence3, int i2, @i.c.a.d CharSequence charSequence4, @i.c.a.e h.q2.s.l<? super T, ? extends CharSequence> lVar) {
        h.q2.t.i0.f(iterable, "$this$joinToString");
        h.q2.t.i0.f(charSequence, "separator");
        h.q2.t.i0.f(charSequence2, RequestParameters.PREFIX);
        h.q2.t.i0.f(charSequence3, "postfix");
        h.q2.t.i0.f(charSequence4, "truncated");
        String string = ((StringBuilder) a(iterable, new StringBuilder(), charSequence, charSequence2, charSequence3, i2, charSequence4, lVar)).toString();
        h.q2.t.i0.a((Object) string, "joinTo(StringBuilder(), …ed, transform).toString()");
        return string;
    }

    @i.c.a.d
    public static final <T, C extends Collection<? super T>> C a(@i.c.a.d Iterable<? extends T> iterable, @i.c.a.d C c2, @i.c.a.d h.q2.s.p<? super Integer, ? super T, Boolean> pVar) {
        h.q2.t.i0.f(iterable, "$this$filterIndexedTo");
        h.q2.t.i0.f(c2, "destination");
        h.q2.t.i0.f(pVar, "predicate");
        int i2 = 0;
        for (T t : iterable) {
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!h.m2.l.a(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                y.f();
            }
            if (pVar.invoke(Integer.valueOf(i2), t).booleanValue()) {
                c2.add(t);
            }
            i2 = i3;
        }
        return c2;
    }
}
